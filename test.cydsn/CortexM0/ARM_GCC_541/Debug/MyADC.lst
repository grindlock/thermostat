ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"MyADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	MyADC_initVar
  20              		.bss
  21              		.type	MyADC_initVar, %object
  22              		.size	MyADC_initVar, 1
  23              	MyADC_initVar:
  24 0000 00       		.space	1
  25              		.comm	MyADC_offset,2,4
  26              		.comm	MyADC_countsPer10Volt,4,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	MyADC_channelsConfig, %object
  30              		.size	MyADC_channelsConfig, 4
  31              	MyADC_channelsConfig:
  32 0000 00040000 		.word	1024
  33              		.section	.text.MyADC_Start,"ax",%progbits
  34              		.align	2
  35              		.global	MyADC_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	MyADC_Start, %function
  39              	MyADC_Start:
  40              	.LFB2:
  41              		.file 1 "Generated_Source\\PSoC4\\MyADC.c"
   1:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/MyADC.c **** * File Name: MyADC.c
   3:Generated_Source\PSoC4/MyADC.c **** * Version 2.50
   4:Generated_Source\PSoC4/MyADC.c **** *
   5:Generated_Source\PSoC4/MyADC.c **** * Description:
   6:Generated_Source\PSoC4/MyADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/MyADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/MyADC.c **** *
   9:Generated_Source\PSoC4/MyADC.c **** * Note:
  10:Generated_Source\PSoC4/MyADC.c **** *
  11:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/MyADC.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/MyADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/MyADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/MyADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 2


  17:Generated_Source\PSoC4/MyADC.c **** 
  18:Generated_Source\PSoC4/MyADC.c **** #include "MyADC.h"
  19:Generated_Source\PSoC4/MyADC.c **** 
  20:Generated_Source\PSoC4/MyADC.c **** 
  21:Generated_Source\PSoC4/MyADC.c **** /***************************************
  22:Generated_Source\PSoC4/MyADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/MyADC.c **** ***************************************/
  24:Generated_Source\PSoC4/MyADC.c **** uint8 MyADC_initVar = 0u;
  25:Generated_Source\PSoC4/MyADC.c **** volatile int16 MyADC_offset[MyADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/MyADC.c **** volatile int32 MyADC_countsPer10Volt[MyADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/MyADC.c **** 
  28:Generated_Source\PSoC4/MyADC.c **** 
  29:Generated_Source\PSoC4/MyADC.c **** /***************************************
  30:Generated_Source\PSoC4/MyADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/MyADC.c **** ***************************************/
  32:Generated_Source\PSoC4/MyADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/MyADC.c **** static const uint32 CYCODE MyADC_channelsConfig[] = { 0x00000400u };
  34:Generated_Source\PSoC4/MyADC.c **** 
  35:Generated_Source\PSoC4/MyADC.c **** 
  36:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_Start
  38:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/MyADC.c **** *
  40:Generated_Source\PSoC4/MyADC.c **** * Summary:
  41:Generated_Source\PSoC4/MyADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/MyADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/MyADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/MyADC.c **** *
  45:Generated_Source\PSoC4/MyADC.c **** * Parameters:
  46:Generated_Source\PSoC4/MyADC.c **** *  None.
  47:Generated_Source\PSoC4/MyADC.c **** *
  48:Generated_Source\PSoC4/MyADC.c **** * Return:
  49:Generated_Source\PSoC4/MyADC.c **** *  None.
  50:Generated_Source\PSoC4/MyADC.c **** *
  51:Generated_Source\PSoC4/MyADC.c **** * Global variables:
  52:Generated_Source\PSoC4/MyADC.c **** *  The MyADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/MyADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/MyADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/MyADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/MyADC.c **** *  MyADC_Start() routine.
  57:Generated_Source\PSoC4/MyADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/MyADC.c **** *  to zero before call of MyADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/MyADC.c **** *  MyADC_Init() and MyADC_Enable() as done in the
  60:Generated_Source\PSoC4/MyADC.c **** *  MyADC_Start() routine.
  61:Generated_Source\PSoC4/MyADC.c **** *
  62:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/MyADC.c **** void MyADC_Start(void)
  64:Generated_Source\PSoC4/MyADC.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 3


  51              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/MyADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/MyADC.c ****     if(MyADC_initVar == 0u)
  52              		.loc 1 66 0
  53 0004 064B     		ldr	r3, .L3
  54 0006 1B78     		ldrb	r3, [r3]
  55 0008 002B     		cmp	r3, #0
  56 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/MyADC.c ****     {
  68:Generated_Source\PSoC4/MyADC.c ****         MyADC_Init();
  57              		.loc 1 68 0
  58 000c FFF7FEFF 		bl	MyADC_Init
  69:Generated_Source\PSoC4/MyADC.c ****         MyADC_initVar = 1u;
  59              		.loc 1 69 0
  60 0010 034B     		ldr	r3, .L3
  61 0012 0122     		movs	r2, #1
  62 0014 1A70     		strb	r2, [r3]
  63              	.L2:
  70:Generated_Source\PSoC4/MyADC.c ****     }
  71:Generated_Source\PSoC4/MyADC.c ****     MyADC_Enable();
  64              		.loc 1 71 0
  65 0016 FFF7FEFF 		bl	MyADC_Enable
  72:Generated_Source\PSoC4/MyADC.c **** }
  66              		.loc 1 72 0
  67 001a C046     		nop
  68 001c BD46     		mov	sp, r7
  69              		@ sp needed
  70 001e 80BD     		pop	{r7, pc}
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0020 00000000 		.word	MyADC_initVar
  75              		.cfi_endproc
  76              	.LFE2:
  77              		.size	MyADC_Start, .-MyADC_Start
  78              		.section	.text.MyADC_Init,"ax",%progbits
  79              		.align	2
  80              		.global	MyADC_Init
  81              		.code	16
  82              		.thumb_func
  83              		.type	MyADC_Init, %function
  84              	MyADC_Init:
  85              	.LFB3:
  73:Generated_Source\PSoC4/MyADC.c **** 
  74:Generated_Source\PSoC4/MyADC.c **** 
  75:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_Init
  77:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/MyADC.c **** *
  79:Generated_Source\PSoC4/MyADC.c **** * Summary:
  80:Generated_Source\PSoC4/MyADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/MyADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/MyADC.c **** *  MyADC_Start().
  83:Generated_Source\PSoC4/MyADC.c **** *
  84:Generated_Source\PSoC4/MyADC.c **** * Parameters:
  85:Generated_Source\PSoC4/MyADC.c **** *  None.
  86:Generated_Source\PSoC4/MyADC.c **** *
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 4


  87:Generated_Source\PSoC4/MyADC.c **** * Return:
  88:Generated_Source\PSoC4/MyADC.c **** *  None.
  89:Generated_Source\PSoC4/MyADC.c **** *
  90:Generated_Source\PSoC4/MyADC.c **** * Global variables:
  91:Generated_Source\PSoC4/MyADC.c **** *  The MyADC_offset variable is initialized.
  92:Generated_Source\PSoC4/MyADC.c **** *
  93:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/MyADC.c **** void MyADC_Init(void)
  95:Generated_Source\PSoC4/MyADC.c **** {
  86              		.loc 1 95 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 16
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 80B5     		push	{r7, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 84B0     		sub	sp, sp, #16
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/MyADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/MyADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/MyADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/MyADC.c **** 
 100:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/MyADC.c ****         static const uint8 CYCODE MyADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/MyADC.c ****         {
 103:Generated_Source\PSoC4/MyADC.c ****             (uint8)(MyADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/MyADC.c ****             (uint8)MyADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/MyADC.c ****             ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/MyADC.c ****              (uint8)MyADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 8u)
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 5


 132:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/MyADC.c ****                 ,(uint8)(MyADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/MyADC.c ****                  (uint8)MyADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/MyADC.c ****             #endif /* End MyADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/MyADC.c ****         };
 168:Generated_Source\PSoC4/MyADC.c ****     #endif /* End MyADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/MyADC.c **** 
 170:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/MyADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/MyADC.c ****         CyIntSetPriority(MyADC_INTC_NUMBER, MyADC_INTC_PRIOR_NUMBER);
  98              		.loc 1 172 0
  99 0006 0321     		movs	r1, #3
 100 0008 0F20     		movs	r0, #15
 101 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/MyADC.c ****         (void)CyIntSetVector(MyADC_INTC_NUMBER, &MyADC_ISR);
 102              		.loc 1 173 0
 103 000e 584B     		ldr	r3, .L18
 104 0010 1900     		movs	r1, r3
 105 0012 0F20     		movs	r0, #15
 106 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/MyADC.c ****     #endif   /* End MyADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/MyADC.c **** 
 176:Generated_Source\PSoC4/MyADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CHAN_EN_REG = MyADC_DEFAULT_EN_CHANNELS;
 107              		.loc 1 177 0
 108 0018 564B     		ldr	r3, .L18+4
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 6


 109 001a 0122     		movs	r2, #1
 110 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG |= MyADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/MyADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/MyADC.c ****         (((MyADC_PUMP_CTRL_REG & MyADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 180 0
 112 001e 564B     		ldr	r3, .L18+8
 113 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG |= MyADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 178 0
 115 0022 002B     		cmp	r3, #0
 116 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG |= MyADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 178 0 is_stmt 0 discriminator 1
 118 0026 5549     		ldr	r1, .L18+12
 119 0028 00E0     		b	.L7
 120              	.L6:
 178:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG |= MyADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 178 0 discriminator 2
 122 002a 5549     		ldr	r1, .L18+16
 123              	.L7:
 178:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG |= MyADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 178 0 discriminator 4
 125 002c 554B     		ldr	r3, .L18+20
 126 002e 554A     		ldr	r2, .L18+20
 127 0030 1268     		ldr	r2, [r2]
 128 0032 0A43     		orrs	r2, r1
 129 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/MyADC.c ****         MyADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_SAMPLE_CTRL_REG = MyADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 130              		.loc 1 182 0 is_stmt 1 discriminator 4
 131 0036 544B     		ldr	r3, .L18+24
 132 0038 544A     		ldr	r2, .L18+28
 133 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_THRES_REG = MyADC_DEFAULT_RANGE_THRES_REG_CFG;
 134              		.loc 1 183 0 discriminator 4
 135 003c 544B     		ldr	r3, .L18+32
 136 003e 554A     		ldr	r2, .L18+36
 137 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_COND_REG  = MyADC_COMPARE_MODE;
 138              		.loc 1 184 0 discriminator 4
 139 0042 554B     		ldr	r3, .L18+40
 140 0044 0022     		movs	r2, #0
 141 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_SAMPLE_TIME01_REG = MyADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 142              		.loc 1 185 0 discriminator 4
 143 0048 544B     		ldr	r3, .L18+44
 144 004a 554A     		ldr	r2, .L18+48
 145 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_SAMPLE_TIME23_REG = MyADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 146              		.loc 1 186 0 discriminator 4
 147 004e 554B     		ldr	r3, .L18+52
 148 0050 554A     		ldr	r2, .L18+56
 149 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/MyADC.c ****     
 188:Generated_Source\PSoC4/MyADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_DEFAULT_MUX_SWITCH0 != 0u)
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 7


 190:Generated_Source\PSoC4/MyADC.c ****         MyADC_MUX_SWITCH0_REG |= MyADC_DEFAULT_MUX_SWITCH0;
 150              		.loc 1 190 0 discriminator 4
 151 0054 554B     		ldr	r3, .L18+60
 152 0056 554A     		ldr	r2, .L18+60
 153 0058 1268     		ldr	r2, [r2]
 154 005a 8021     		movs	r1, #128
 155 005c 4902     		lsls	r1, r1, #9
 156 005e 0A43     		orrs	r2, r1
 157 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/MyADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/MyADC.c ****             MyADC_MUX_SWITCH_HW_CTRL_REG |= MyADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/MyADC.c ****     #endif /*MyADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/MyADC.c **** 
 197:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 158              		.loc 1 197 0 discriminator 4
 159 0062 534B     		ldr	r3, .L18+64
 160 0064 0022     		movs	r2, #0
 161 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_INTR_MASK_REG = 0u;
 162              		.loc 1 198 0 discriminator 4
 163 0068 524B     		ldr	r3, .L18+68
 164 006a 0022     		movs	r2, #0
 165 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_INTR_MASK_REG = MyADC_SAR_INTR_MASK;
 166              		.loc 1 199 0 discriminator 4
 167 006e 524B     		ldr	r3, .L18+72
 168 0070 0122     		movs	r2, #1
 169 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/MyADC.c **** 
 201:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_CY_SAR_IP_VER == MyADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/MyADC.c ****         MyADC_ANA_TRIM_REG = MyADC_TRIM_COEF;
 203:Generated_Source\PSoC4/MyADC.c ****     #endif /* (MyADC_CY_SAR_IP_VER == MyADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/MyADC.c **** 
 205:Generated_Source\PSoC4/MyADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/MyADC.c ****     tmpRegVal = MyADC_SAR_DFT_CTRL_REG;
 170              		.loc 1 206 0 discriminator 4
 171 0074 514B     		ldr	r3, .L18+76
 172 0076 1B68     		ldr	r3, [r3]
 173 0078 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/MyADC.c ****     tmpRegVal &= (uint32)~MyADC_DCEN;
 174              		.loc 1 207 0 discriminator 4
 175 007a 7B68     		ldr	r3, [r7, #4]
 176 007c 504A     		ldr	r2, .L18+80
 177 007e 1340     		ands	r3, r2
 178 0080 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/MyADC.c ****     
 209:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_CY_SAR_IP_VER == MyADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_NOMINAL_CLOCK_FREQ > (MyADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal |= MyADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/MyADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal |= MyADC_DLY_INC;
 214:Generated_Source\PSoC4/MyADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/MyADC.c ****     #else
 216:Generated_Source\PSoC4/MyADC.c ****         #if ((MyADC_DEFAULT_VREF_SEL == MyADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/MyADC.c ****              (MyADC_DEFAULT_VREF_SEL == MyADC__INTERNALVREF))
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 8


 218:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal |= MyADC_DLY_INC;
 179              		.loc 1 218 0 discriminator 4
 180 0082 7B68     		ldr	r3, [r7, #4]
 181 0084 0122     		movs	r2, #1
 182 0086 1343     		orrs	r3, r2
 183 0088 7B60     		str	r3, [r7, #4]
 219:Generated_Source\PSoC4/MyADC.c ****         #else
 220:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal |= MyADC_DCEN;
 221:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal &= (uint32)~MyADC_DLY_INC;
 222:Generated_Source\PSoC4/MyADC.c ****         #endif /* ((MyADC_DEFAULT_VREF_SEL == MyADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/MyADC.c ****                    (MyADC_DEFAULT_VREF_SEL == MyADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/MyADC.c ****     #endif /* (MyADC_CY_SAR_IP_VER == MyADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/MyADC.c ****     
 226:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 226 0 discriminator 4
 185 008a 4C4B     		ldr	r3, .L18+76
 186 008c 7A68     		ldr	r2, [r7, #4]
 187 008e 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/MyADC.c **** 
 228:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_MAX_RESOLUTION != MyADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/MyADC.c ****         MyADC_WOUNDING_REG = MyADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/MyADC.c ****     #endif /* MyADC_MAX_RESOLUTION != MyADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/MyADC.c **** 
 232:Generated_Source\PSoC4/MyADC.c ****     for(chNum = 0u; chNum < MyADC_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 232 0 discriminator 4
 189 0090 0023     		movs	r3, #0
 190 0092 FB60     		str	r3, [r7, #12]
 191 0094 65E0     		b	.L8
 192              	.L17:
 233:Generated_Source\PSoC4/MyADC.c ****     {
 234:Generated_Source\PSoC4/MyADC.c ****         tmpRegVal = (MyADC_channelsConfig[chNum] & MyADC_CHANNEL_CONFIG_MASK);
 193              		.loc 1 234 0
 194 0096 8023     		movs	r3, #128
 195 0098 DA00     		lsls	r2, r3, #3
 196 009a DC23     		movs	r3, #220
 197 009c 9B01     		lsls	r3, r3, #6
 198 009e 1340     		ands	r3, r2
 199 00a0 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal |= MyADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/MyADC.c ****         #endif /* End MyADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/MyADC.c ****         
 239:Generated_Source\PSoC4/MyADC.c ****         
 240:Generated_Source\PSoC4/MyADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/MyADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/MyADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/MyADC.c ****         */
 244:Generated_Source\PSoC4/MyADC.c ****         #if((MyADC_MAX_RESOLUTION != MyADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/MyADC.c ****             (MyADC_ALT_WOUNDING == MyADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/MyADC.c ****             tmpRegVal &= (uint32)(~MyADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_MAX_RESOLUTION != MyADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/MyADC.c **** 
 249:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/MyADC.c ****         if(chNum < MyADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/MyADC.c ****         {
 253:Generated_Source\PSoC4/MyADC.c ****             CY_SET_REG32((reg32 *)(MyADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 9


 200              		.loc 1 253 0
 201 00a2 FB68     		ldr	r3, [r7, #12]
 202 00a4 9B00     		lsls	r3, r3, #2
 203 00a6 474A     		ldr	r2, .L18+84
 204 00a8 9446     		mov	ip, r2
 205 00aa 6344     		add	r3, r3, ip
 206 00ac 7A68     		ldr	r2, [r7, #4]
 207 00ae 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/MyADC.c **** 
 255:Generated_Source\PSoC4/MyADC.c ****             if((MyADC_channelsConfig[chNum] & MyADC_IS_SATURATE_EN_MASK) != 0u)
 208              		.loc 1 255 0
 209 00b0 8023     		movs	r3, #128
 210 00b2 DB00     		lsls	r3, r3, #3
 211 00b4 0122     		movs	r2, #1
 212 00b6 1340     		ands	r3, r2
 213 00b8 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/MyADC.c ****             {
 257:Generated_Source\PSoC4/MyADC.c ****                 MyADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 257 0
 215 00ba 3D4B     		ldr	r3, .L18+64
 216 00bc 3C4A     		ldr	r2, .L18+64
 217 00be 1168     		ldr	r1, [r2]
 218 00c0 0120     		movs	r0, #1
 219 00c2 FA68     		ldr	r2, [r7, #12]
 220 00c4 9040     		lsls	r0, r0, r2
 221 00c6 0200     		movs	r2, r0
 222 00c8 1204     		lsls	r2, r2, #16
 223 00ca 120C     		lsrs	r2, r2, #16
 224 00cc 0A43     		orrs	r2, r1
 225 00ce 1A60     		str	r2, [r3]
 226              	.L9:
 258:Generated_Source\PSoC4/MyADC.c ****             }
 259:Generated_Source\PSoC4/MyADC.c **** 
 260:Generated_Source\PSoC4/MyADC.c ****             if((MyADC_channelsConfig[chNum] & MyADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 227              		.loc 1 260 0
 228 00d0 8023     		movs	r3, #128
 229 00d2 DB00     		lsls	r3, r3, #3
 230 00d4 0222     		movs	r2, #2
 231 00d6 1340     		ands	r3, r2
 232 00d8 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/MyADC.c ****             {
 262:Generated_Source\PSoC4/MyADC.c ****                 MyADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 233              		.loc 1 262 0
 234 00da 364B     		ldr	r3, .L18+68
 235 00dc 354A     		ldr	r2, .L18+68
 236 00de 1168     		ldr	r1, [r2]
 237 00e0 0120     		movs	r0, #1
 238 00e2 FA68     		ldr	r2, [r7, #12]
 239 00e4 9040     		lsls	r0, r0, r2
 240 00e6 0200     		movs	r2, r0
 241 00e8 1204     		lsls	r2, r2, #16
 242 00ea 120C     		lsrs	r2, r2, #16
 243 00ec 0A43     		orrs	r2, r1
 244 00ee 1A60     		str	r2, [r3]
 245              	.L10:
 263:Generated_Source\PSoC4/MyADC.c ****             }
 264:Generated_Source\PSoC4/MyADC.c ****         }
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 10


 265:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/MyADC.c ****             else
 267:Generated_Source\PSoC4/MyADC.c ****             {
 268:Generated_Source\PSoC4/MyADC.c ****                 CY_SET_REG32(MyADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | MyADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/MyADC.c **** 
 270:Generated_Source\PSoC4/MyADC.c ****                 if((MyADC_channelsConfig[chNum] & MyADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/MyADC.c ****                 {
 272:Generated_Source\PSoC4/MyADC.c ****                     MyADC_SAR_INTR_MASK_REG |= MyADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/MyADC.c ****                 }
 274:Generated_Source\PSoC4/MyADC.c **** 
 275:Generated_Source\PSoC4/MyADC.c ****                 if((MyADC_channelsConfig[chNum] & MyADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/MyADC.c ****                 {
 277:Generated_Source\PSoC4/MyADC.c ****                     MyADC_SAR_INTR_MASK_REG |= MyADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/MyADC.c ****                 }
 279:Generated_Source\PSoC4/MyADC.c ****             }
 280:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/MyADC.c **** 
 282:Generated_Source\PSoC4/MyADC.c ****         if((MyADC_channelsConfig[chNum] & MyADC_ALT_RESOLUTION_ON) != 0u)
 246              		.loc 1 282 0
 247 00f0 8023     		movs	r3, #128
 248 00f2 DA00     		lsls	r2, r3, #3
 249 00f4 8023     		movs	r3, #128
 250 00f6 9B00     		lsls	r3, r3, #2
 251 00f8 1340     		ands	r3, r2
 252 00fa 03D0     		beq	.L11
 283:Generated_Source\PSoC4/MyADC.c ****         {
 284:Generated_Source\PSoC4/MyADC.c ****                counts = (int32)MyADC_DEFAULT_MAX_WRK_ALT;
 253              		.loc 1 284 0
 254 00fc 8023     		movs	r3, #128
 255 00fe 5B00     		lsls	r3, r3, #1
 256 0100 BB60     		str	r3, [r7, #8]
 257 0102 02E0     		b	.L12
 258              	.L11:
 285:Generated_Source\PSoC4/MyADC.c ****         }
 286:Generated_Source\PSoC4/MyADC.c ****         else
 287:Generated_Source\PSoC4/MyADC.c ****         {
 288:Generated_Source\PSoC4/MyADC.c ****                counts = (int32)MyADC_SAR_WRK_MAX_12BIT;
 259              		.loc 1 288 0
 260 0104 8023     		movs	r3, #128
 261 0106 5B01     		lsls	r3, r3, #5
 262 0108 BB60     		str	r3, [r7, #8]
 263              	.L12:
 289:Generated_Source\PSoC4/MyADC.c ****         }
 290:Generated_Source\PSoC4/MyADC.c **** 
 291:Generated_Source\PSoC4/MyADC.c ****         if((MyADC_channelsConfig[chNum] & MyADC_DIFFERENTIAL_EN) == 0u)
 264              		.loc 1 291 0
 265 010a 8023     		movs	r3, #128
 266 010c DA00     		lsls	r2, r3, #3
 267 010e 8023     		movs	r3, #128
 268 0110 5B00     		lsls	r3, r3, #1
 269 0112 1340     		ands	r3, r2
 270 0114 05D1     		bne	.L13
 292:Generated_Source\PSoC4/MyADC.c ****         {
 293:Generated_Source\PSoC4/MyADC.c ****             #if((MyADC_DEFAULT_SE_RESULT_FORMAT_SEL == MyADC__FSIGNED) && \
 294:Generated_Source\PSoC4/MyADC.c ****                 (MyADC_DEFAULT_NEG_INPUT_SEL == MyADC__VREF))
 295:Generated_Source\PSoC4/MyADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/MyADC.c ****                 MyADC_offset[chNum] = (int16)(counts / -2);
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 11


 297:Generated_Source\PSoC4/MyADC.c ****             #else
 298:Generated_Source\PSoC4/MyADC.c ****                 MyADC_offset[chNum] = 0;
 271              		.loc 1 298 0
 272 0116 2C4B     		ldr	r3, .L18+88
 273 0118 FA68     		ldr	r2, [r7, #12]
 274 011a 5200     		lsls	r2, r2, #1
 275 011c 0021     		movs	r1, #0
 276 011e D152     		strh	r1, [r2, r3]
 277 0120 09E0     		b	.L14
 278              	.L13:
 299:Generated_Source\PSoC4/MyADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == MyADC__FSIGNED */
 300:Generated_Source\PSoC4/MyADC.c ****         }
 301:Generated_Source\PSoC4/MyADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/MyADC.c ****         {
 303:Generated_Source\PSoC4/MyADC.c ****             #if(MyADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == MyADC__FUNSIGNED)
 304:Generated_Source\PSoC4/MyADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/MyADC.c ****                 MyADC_offset[chNum] = (int16)(counts / 2);
 279              		.loc 1 305 0
 280 0122 BB68     		ldr	r3, [r7, #8]
 281 0124 002B     		cmp	r3, #0
 282 0126 00DA     		bge	.L15
 283 0128 0133     		adds	r3, r3, #1
 284              	.L15:
 285 012a 5B10     		asrs	r3, r3, #1
 286 012c 19B2     		sxth	r1, r3
 287 012e 264B     		ldr	r3, .L18+88
 288 0130 FA68     		ldr	r2, [r7, #12]
 289 0132 5200     		lsls	r2, r2, #1
 290 0134 D152     		strh	r1, [r2, r3]
 291              	.L14:
 306:Generated_Source\PSoC4/MyADC.c ****             #else
 307:Generated_Source\PSoC4/MyADC.c ****                 MyADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/MyADC.c ****             #endif /* end MyADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == MyADC__FUNSIGNED */
 309:Generated_Source\PSoC4/MyADC.c ****         }
 310:Generated_Source\PSoC4/MyADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/MyADC.c ****         MyADC_countsPer10Volt[chNum] = (int16)(((counts * MyADC_10MV_COUNTS) +
 292              		.loc 1 311 0 discriminator 2
 293 0136 BB68     		ldr	r3, [r7, #8]
 294 0138 244A     		ldr	r2, .L18+92
 295 013a 5343     		muls	r3, r2
 296 013c 8022     		movs	r2, #128
 297 013e D200     		lsls	r2, r2, #3
 298 0140 9446     		mov	ip, r2
 299 0142 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/MyADC.c ****                             MyADC_DEFAULT_VREF_MV_VALUE) / (MyADC_DEFAULT_VREF_MV_VALUE * 2));
 300              		.loc 1 312 0 discriminator 2
 301 0144 002B     		cmp	r3, #0
 302 0146 02DA     		bge	.L16
 303 0148 214A     		ldr	r2, .L18+96
 304 014a 9446     		mov	ip, r2
 305 014c 6344     		add	r3, r3, ip
 306              	.L16:
 307 014e DB12     		asrs	r3, r3, #11
 311:Generated_Source\PSoC4/MyADC.c ****                             MyADC_DEFAULT_VREF_MV_VALUE) / (MyADC_DEFAULT_VREF_MV_VALUE * 2));
 308              		.loc 1 311 0 discriminator 2
 309 0150 1BB2     		sxth	r3, r3
 310 0152 1900     		movs	r1, r3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 12


 311 0154 1F4B     		ldr	r3, .L18+100
 312 0156 FA68     		ldr	r2, [r7, #12]
 313 0158 9200     		lsls	r2, r2, #2
 314 015a D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/MyADC.c ****     {
 315              		.loc 1 232 0 discriminator 2
 316 015c FB68     		ldr	r3, [r7, #12]
 317 015e 0133     		adds	r3, r3, #1
 318 0160 FB60     		str	r3, [r7, #12]
 319              	.L8:
 232:Generated_Source\PSoC4/MyADC.c ****     {
 320              		.loc 1 232 0 is_stmt 0 discriminator 1
 321 0162 FB68     		ldr	r3, [r7, #12]
 322 0164 002B     		cmp	r3, #0
 323 0166 96D0     		beq	.L17
 313:Generated_Source\PSoC4/MyADC.c ****     }
 314:Generated_Source\PSoC4/MyADC.c **** }
 324              		.loc 1 314 0 is_stmt 1
 325 0168 C046     		nop
 326 016a BD46     		mov	sp, r7
 327 016c 04B0     		add	sp, sp, #16
 328              		@ sp needed
 329 016e 80BD     		pop	{r7, pc}
 330              	.L19:
 331              		.align	2
 332              	.L18:
 333 0170 00000000 		.word	MyADC_ISR
 334 0174 20003A40 		.word	1077542944
 335 0178 80033A40 		.word	1077543808
 336 017c 40021053 		.word	1393558080
 337 0180 40020053 		.word	1392509504
 338 0184 00003A40 		.word	1077542912
 339 0188 04003A40 		.word	1077542916
 340 018c F4000080 		.word	-2147483404
 341 0190 18003A40 		.word	1077542936
 342 0194 0000FF07 		.word	134152192
 343 0198 1C003A40 		.word	1077542940
 344 019c 10003A40 		.word	1077542928
 345 01a0 FF030200 		.word	132095
 346 01a4 14003A40 		.word	1077542932
 347 01a8 02000200 		.word	131074
 348 01ac 00033A40 		.word	1077543680
 349 01b0 28023A40 		.word	1077543464
 350 01b4 38023A40 		.word	1077543480
 351 01b8 18023A40 		.word	1077543448
 352 01bc 30003A40 		.word	1077542960
 353 01c0 FFFFFFDF 		.word	-536870913
 354 01c4 80003A40 		.word	1077543040
 355 01c8 00000000 		.word	MyADC_offset
 356 01cc 10270000 		.word	10000
 357 01d0 FF070000 		.word	2047
 358 01d4 00000000 		.word	MyADC_countsPer10Volt
 359              		.cfi_endproc
 360              	.LFE3:
 361              		.size	MyADC_Init, .-MyADC_Init
 362              		.section	.text.MyADC_Enable,"ax",%progbits
 363              		.align	2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 13


 364              		.global	MyADC_Enable
 365              		.code	16
 366              		.thumb_func
 367              		.type	MyADC_Enable, %function
 368              	MyADC_Enable:
 369              	.LFB4:
 315:Generated_Source\PSoC4/MyADC.c **** 
 316:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/MyADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/MyADC.c **** *
 320:Generated_Source\PSoC4/MyADC.c **** * Summary:
 321:Generated_Source\PSoC4/MyADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/MyADC.c **** *
 323:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 324:Generated_Source\PSoC4/MyADC.c **** *  None.
 325:Generated_Source\PSoC4/MyADC.c **** *
 326:Generated_Source\PSoC4/MyADC.c **** * Return:
 327:Generated_Source\PSoC4/MyADC.c **** *  None.
 328:Generated_Source\PSoC4/MyADC.c **** *
 329:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/MyADC.c **** void MyADC_Enable(void)
 331:Generated_Source\PSoC4/MyADC.c **** {
 370              		.loc 1 331 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 1, uses_anonymous_args = 0
 374 0000 80B5     		push	{r7, lr}
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 0002 00AF     		add	r7, sp, #0
 379              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/MyADC.c ****     if (0u == (MyADC_SAR_CTRL_REG & MyADC_ENABLE))
 380              		.loc 1 332 0
 381 0004 0A4B     		ldr	r3, .L24
 382 0006 1B68     		ldr	r3, [r3]
 383 0008 002B     		cmp	r3, #0
 384 000a 0EDB     		blt	.L23
 333:Generated_Source\PSoC4/MyADC.c ****     {
 334:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_CY_SAR_IP_VER != MyADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/MyADC.c **** 
 336:Generated_Source\PSoC4/MyADC.c ****             while (0u != (MyADC_SAR_STATUS_REG & MyADC_STATUS_BUSY))
 385              		.loc 1 336 0
 386 000c C046     		nop
 387              	.L22:
 388              		.loc 1 336 0 is_stmt 0 discriminator 1
 389 000e 094B     		ldr	r3, .L24+4
 390 0010 1B68     		ldr	r3, [r3]
 391 0012 002B     		cmp	r3, #0
 392 0014 FBDB     		blt	.L22
 337:Generated_Source\PSoC4/MyADC.c ****             {
 338:Generated_Source\PSoC4/MyADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/MyADC.c ****             }
 340:Generated_Source\PSoC4/MyADC.c ****         #endif /* (MyADC_CY_SAR_IP_VER != MyADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/MyADC.c ****         
 342:Generated_Source\PSoC4/MyADC.c ****         MyADC_SAR_CTRL_REG |= MyADC_ENABLE;
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 14


 393              		.loc 1 342 0 is_stmt 1
 394 0016 064B     		ldr	r3, .L24
 395 0018 054A     		ldr	r2, .L24
 396 001a 1268     		ldr	r2, [r2]
 397 001c 8021     		movs	r1, #128
 398 001e 0906     		lsls	r1, r1, #24
 399 0020 0A43     		orrs	r2, r1
 400 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/MyADC.c ****         
 344:Generated_Source\PSoC4/MyADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/MyADC.c ****         CyDelayUs(MyADC_10US_DELAY);         
 401              		.loc 1 345 0
 402 0024 0A20     		movs	r0, #10
 403 0026 FFF7FEFF 		bl	CyDelayUs
 404              	.L23:
 346:Generated_Source\PSoC4/MyADC.c ****     }
 347:Generated_Source\PSoC4/MyADC.c **** }
 405              		.loc 1 347 0
 406 002a C046     		nop
 407 002c BD46     		mov	sp, r7
 408              		@ sp needed
 409 002e 80BD     		pop	{r7, pc}
 410              	.L25:
 411              		.align	2
 412              	.L24:
 413 0030 00003A40 		.word	1077542912
 414 0034 08023A40 		.word	1077543432
 415              		.cfi_endproc
 416              	.LFE4:
 417              		.size	MyADC_Enable, .-MyADC_Enable
 418              		.section	.text.MyADC_Stop,"ax",%progbits
 419              		.align	2
 420              		.global	MyADC_Stop
 421              		.code	16
 422              		.thumb_func
 423              		.type	MyADC_Stop, %function
 424              	MyADC_Stop:
 425              	.LFB5:
 348:Generated_Source\PSoC4/MyADC.c **** 
 349:Generated_Source\PSoC4/MyADC.c **** 
 350:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_Stop
 352:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/MyADC.c **** *
 354:Generated_Source\PSoC4/MyADC.c **** * Summary:
 355:Generated_Source\PSoC4/MyADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/MyADC.c **** *  mode.
 357:Generated_Source\PSoC4/MyADC.c **** *
 358:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 359:Generated_Source\PSoC4/MyADC.c **** *  None.
 360:Generated_Source\PSoC4/MyADC.c **** *
 361:Generated_Source\PSoC4/MyADC.c **** * Return:
 362:Generated_Source\PSoC4/MyADC.c **** *  None.
 363:Generated_Source\PSoC4/MyADC.c **** *
 364:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/MyADC.c **** void MyADC_Stop(void)
 366:Generated_Source\PSoC4/MyADC.c **** {
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 15


 426              		.loc 1 366 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0000 80B5     		push	{r7, lr}
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 0002 00AF     		add	r7, sp, #0
 435              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CTRL_REG &= (uint32)~MyADC_ENABLE;
 436              		.loc 1 367 0
 437 0004 044B     		ldr	r3, .L27
 438 0006 044A     		ldr	r2, .L27
 439 0008 1268     		ldr	r2, [r2]
 440 000a 5200     		lsls	r2, r2, #1
 441 000c 5208     		lsrs	r2, r2, #1
 442 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/MyADC.c **** }
 443              		.loc 1 368 0
 444 0010 C046     		nop
 445 0012 BD46     		mov	sp, r7
 446              		@ sp needed
 447 0014 80BD     		pop	{r7, pc}
 448              	.L28:
 449 0016 C046     		.align	2
 450              	.L27:
 451 0018 00003A40 		.word	1077542912
 452              		.cfi_endproc
 453              	.LFE5:
 454              		.size	MyADC_Stop, .-MyADC_Stop
 455              		.section	.text.MyADC_StartConvert,"ax",%progbits
 456              		.align	2
 457              		.global	MyADC_StartConvert
 458              		.code	16
 459              		.thumb_func
 460              		.type	MyADC_StartConvert, %function
 461              	MyADC_StartConvert:
 462              	.LFB6:
 369:Generated_Source\PSoC4/MyADC.c **** 
 370:Generated_Source\PSoC4/MyADC.c **** 
 371:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_StartConvert
 373:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/MyADC.c **** *
 375:Generated_Source\PSoC4/MyADC.c **** * Summary:
 376:Generated_Source\PSoC4/MyADC.c **** *  Description:
 377:Generated_Source\PSoC4/MyADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/MyADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/MyADC.c **** *
 380:Generated_Source\PSoC4/MyADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/MyADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/MyADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/MyADC.c **** *
 384:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 385:Generated_Source\PSoC4/MyADC.c **** *  None.
 386:Generated_Source\PSoC4/MyADC.c **** *
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 16


 387:Generated_Source\PSoC4/MyADC.c **** * Return:
 388:Generated_Source\PSoC4/MyADC.c **** *  None.
 389:Generated_Source\PSoC4/MyADC.c **** *
 390:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/MyADC.c **** void MyADC_StartConvert(void)
 392:Generated_Source\PSoC4/MyADC.c **** {
 463              		.loc 1 392 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 0000 80B5     		push	{r7, lr}
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 00AF     		add	r7, sp, #0
 472              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_DEFAULT_SAMPLE_MODE_SEL == MyADC__FREERUNNING)
 394:Generated_Source\PSoC4/MyADC.c ****         MyADC_SAR_SAMPLE_CTRL_REG |= MyADC_CONTINUOUS_EN;
 473              		.loc 1 394 0
 474 0004 044B     		ldr	r3, .L30
 475 0006 044A     		ldr	r2, .L30
 476 0008 1268     		ldr	r2, [r2]
 477 000a 8021     		movs	r1, #128
 478 000c 4902     		lsls	r1, r1, #9
 479 000e 0A43     		orrs	r2, r1
 480 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/MyADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/MyADC.c ****         MyADC_SAR_START_CTRL_REG = MyADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/MyADC.c ****     #endif /* End MyADC_DEFAULT_SAMPLE_MODE == MyADC__FREERUNNING */
 398:Generated_Source\PSoC4/MyADC.c **** 
 399:Generated_Source\PSoC4/MyADC.c **** }
 481              		.loc 1 399 0
 482 0012 C046     		nop
 483 0014 BD46     		mov	sp, r7
 484              		@ sp needed
 485 0016 80BD     		pop	{r7, pc}
 486              	.L31:
 487              		.align	2
 488              	.L30:
 489 0018 04003A40 		.word	1077542916
 490              		.cfi_endproc
 491              	.LFE6:
 492              		.size	MyADC_StartConvert, .-MyADC_StartConvert
 493              		.section	.text.MyADC_StopConvert,"ax",%progbits
 494              		.align	2
 495              		.global	MyADC_StopConvert
 496              		.code	16
 497              		.thumb_func
 498              		.type	MyADC_StopConvert, %function
 499              	MyADC_StopConvert:
 500              	.LFB7:
 400:Generated_Source\PSoC4/MyADC.c **** 
 401:Generated_Source\PSoC4/MyADC.c **** 
 402:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_StopConvert
 404:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/MyADC.c **** *
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 17


 406:Generated_Source\PSoC4/MyADC.c **** * Summary:
 407:Generated_Source\PSoC4/MyADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/MyADC.c **** *
 409:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 410:Generated_Source\PSoC4/MyADC.c **** *  None.
 411:Generated_Source\PSoC4/MyADC.c **** *
 412:Generated_Source\PSoC4/MyADC.c **** * Return:
 413:Generated_Source\PSoC4/MyADC.c **** *  None.
 414:Generated_Source\PSoC4/MyADC.c **** *
 415:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/MyADC.c **** void MyADC_StopConvert(void)
 417:Generated_Source\PSoC4/MyADC.c **** {
 501              		.loc 1 417 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 00AF     		add	r7, sp, #0
 510              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_DEFAULT_SAMPLE_MODE_SEL == MyADC__FREERUNNING)
 419:Generated_Source\PSoC4/MyADC.c ****         MyADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~MyADC_CONTINUOUS_EN);
 511              		.loc 1 419 0
 512 0004 044B     		ldr	r3, .L33
 513 0006 044A     		ldr	r2, .L33
 514 0008 1268     		ldr	r2, [r2]
 515 000a 0449     		ldr	r1, .L33+4
 516 000c 0A40     		ands	r2, r1
 517 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/MyADC.c ****     #endif /* MyADC_DEFAULT_SAMPLE_MODE == MyADC__FREERUNNING */
 421:Generated_Source\PSoC4/MyADC.c **** }
 518              		.loc 1 421 0
 519 0010 C046     		nop
 520 0012 BD46     		mov	sp, r7
 521              		@ sp needed
 522 0014 80BD     		pop	{r7, pc}
 523              	.L34:
 524 0016 C046     		.align	2
 525              	.L33:
 526 0018 04003A40 		.word	1077542916
 527 001c FFFFFEFF 		.word	-65537
 528              		.cfi_endproc
 529              	.LFE7:
 530              		.size	MyADC_StopConvert, .-MyADC_StopConvert
 531              		.section	.text.MyADC_IsEndConversion,"ax",%progbits
 532              		.align	2
 533              		.global	MyADC_IsEndConversion
 534              		.code	16
 535              		.thumb_func
 536              		.type	MyADC_IsEndConversion, %function
 537              	MyADC_IsEndConversion:
 538              	.LFB8:
 422:Generated_Source\PSoC4/MyADC.c **** 
 423:Generated_Source\PSoC4/MyADC.c **** 
 424:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 18


 425:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_IsEndConversion
 426:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/MyADC.c **** *
 428:Generated_Source\PSoC4/MyADC.c **** * Summary:
 429:Generated_Source\PSoC4/MyADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/MyADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/MyADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/MyADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/MyADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/MyADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/MyADC.c **** *  completed.
 436:Generated_Source\PSoC4/MyADC.c **** *
 437:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 438:Generated_Source\PSoC4/MyADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/MyADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/MyADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/MyADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/MyADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/MyADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/MyADC.c **** *
 445:Generated_Source\PSoC4/MyADC.c **** * Return:
 446:Generated_Source\PSoC4/MyADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/MyADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/MyADC.c **** *
 449:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/MyADC.c **** uint32 MyADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/MyADC.c **** {
 539              		.loc 1 451 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 16
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 80B5     		push	{r7, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 84B0     		sub	sp, sp, #16
 548              		.cfi_def_cfa_offset 24
 549 0004 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 551 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/MyADC.c ****     uint32 status = 0u;
 552              		.loc 1 452 0
 553 0008 0023     		movs	r3, #0
 554 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/MyADC.c **** 
 454:Generated_Source\PSoC4/MyADC.c ****     if((retMode & (MyADC_RETURN_STATUS | MyADC_WAIT_FOR_RESULT)) != 0u)
 555              		.loc 1 454 0
 556 000c 7B68     		ldr	r3, [r7, #4]
 557 000e 0322     		movs	r2, #3
 558 0010 1340     		ands	r3, r2
 559 0012 11D0     		beq	.L36
 560              	.L38:
 455:Generated_Source\PSoC4/MyADC.c ****     {
 456:Generated_Source\PSoC4/MyADC.c ****         do
 457:Generated_Source\PSoC4/MyADC.c ****         {
 458:Generated_Source\PSoC4/MyADC.c ****             status = MyADC_SAR_INTR_REG & MyADC_EOS_MASK;
 561              		.loc 1 458 0 discriminator 2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 19


 562 0014 0B4B     		ldr	r3, .L40
 563 0016 1B68     		ldr	r3, [r3]
 564 0018 0122     		movs	r2, #1
 565 001a 1340     		ands	r3, r2
 566 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/MyADC.c ****         }while((status == 0u) && ((retMode & MyADC_WAIT_FOR_RESULT) != 0u));
 567              		.loc 1 459 0 discriminator 2
 568 001e FB68     		ldr	r3, [r7, #12]
 569 0020 002B     		cmp	r3, #0
 570 0022 03D1     		bne	.L37
 571              		.loc 1 459 0 is_stmt 0 discriminator 1
 572 0024 7B68     		ldr	r3, [r7, #4]
 573 0026 0222     		movs	r2, #2
 574 0028 1340     		ands	r3, r2
 575 002a F3D1     		bne	.L38
 576              	.L37:
 460:Generated_Source\PSoC4/MyADC.c **** 
 461:Generated_Source\PSoC4/MyADC.c ****         if(status != 0u)
 577              		.loc 1 461 0 is_stmt 1
 578 002c FB68     		ldr	r3, [r7, #12]
 579 002e 002B     		cmp	r3, #0
 580 0030 02D0     		beq	.L36
 462:Generated_Source\PSoC4/MyADC.c ****         {
 463:Generated_Source\PSoC4/MyADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/MyADC.c ****             MyADC_SAR_INTR_REG = MyADC_EOS_MASK;
 581              		.loc 1 464 0
 582 0032 044B     		ldr	r3, .L40
 583 0034 0122     		movs	r2, #1
 584 0036 1A60     		str	r2, [r3]
 585              	.L36:
 465:Generated_Source\PSoC4/MyADC.c ****         }
 466:Generated_Source\PSoC4/MyADC.c ****     }
 467:Generated_Source\PSoC4/MyADC.c **** 
 468:Generated_Source\PSoC4/MyADC.c ****     #if(MyADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/MyADC.c ****         if((retMode & (MyADC_RETURN_STATUS_INJ | MyADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/MyADC.c ****         {
 471:Generated_Source\PSoC4/MyADC.c ****             do
 472:Generated_Source\PSoC4/MyADC.c ****             {
 473:Generated_Source\PSoC4/MyADC.c ****                 status |= MyADC_SAR_INTR_REG & MyADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/MyADC.c ****             }while(((status & MyADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/MyADC.c ****                    ((retMode & MyADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/MyADC.c **** 
 477:Generated_Source\PSoC4/MyADC.c ****             if((status & MyADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/MyADC.c ****             {
 479:Generated_Source\PSoC4/MyADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/MyADC.c ****                 MyADC_SAR_INTR_REG = MyADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/MyADC.c ****             }
 482:Generated_Source\PSoC4/MyADC.c ****         }
 483:Generated_Source\PSoC4/MyADC.c ****     #endif /* MyADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/MyADC.c **** 
 485:Generated_Source\PSoC4/MyADC.c ****     return (status);
 586              		.loc 1 485 0
 587 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/MyADC.c **** }
 588              		.loc 1 486 0
 589 003a 1800     		movs	r0, r3
 590 003c BD46     		mov	sp, r7
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 20


 591 003e 04B0     		add	sp, sp, #16
 592              		@ sp needed
 593 0040 80BD     		pop	{r7, pc}
 594              	.L41:
 595 0042 C046     		.align	2
 596              	.L40:
 597 0044 10023A40 		.word	1077543440
 598              		.cfi_endproc
 599              	.LFE8:
 600              		.size	MyADC_IsEndConversion, .-MyADC_IsEndConversion
 601              		.section	.text.MyADC_GetResult16,"ax",%progbits
 602              		.align	2
 603              		.global	MyADC_GetResult16
 604              		.code	16
 605              		.thumb_func
 606              		.type	MyADC_GetResult16, %function
 607              	MyADC_GetResult16:
 608              	.LFB9:
 487:Generated_Source\PSoC4/MyADC.c **** 
 488:Generated_Source\PSoC4/MyADC.c **** 
 489:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_GetResult16
 491:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/MyADC.c **** *
 493:Generated_Source\PSoC4/MyADC.c **** * Summary:
 494:Generated_Source\PSoC4/MyADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/MyADC.c **** *
 496:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 497:Generated_Source\PSoC4/MyADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/MyADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/MyADC.c **** *
 500:Generated_Source\PSoC4/MyADC.c **** * Return:
 501:Generated_Source\PSoC4/MyADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/MyADC.c **** *
 503:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/MyADC.c **** int16 MyADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/MyADC.c **** {
 609              		.loc 1 505 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 16
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613 0000 80B5     		push	{r7, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 7, -8
 616              		.cfi_offset 14, -4
 617 0002 84B0     		sub	sp, sp, #16
 618              		.cfi_def_cfa_offset 24
 619 0004 00AF     		add	r7, sp, #0
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/MyADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/MyADC.c **** 
 508:Generated_Source\PSoC4/MyADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/MyADC.c ****     CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 622              		.loc 1 509 0
 623 0008 7B68     		ldr	r3, [r7, #4]
 624 000a 002B     		cmp	r3, #0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 21


 625 000c 02D0     		beq	.L43
 626              		.loc 1 509 0 is_stmt 0 discriminator 1
 627 000e 0020     		movs	r0, #0
 628 0010 FFF7FEFF 		bl	CyHalt
 629              	.L43:
 510:Generated_Source\PSoC4/MyADC.c **** 
 511:Generated_Source\PSoC4/MyADC.c ****     if(chan < MyADC_SEQUENCED_CHANNELS_NUM)
 630              		.loc 1 511 0 is_stmt 1
 631 0014 7B68     		ldr	r3, [r7, #4]
 632 0016 002B     		cmp	r3, #0
 633 0018 09D1     		bne	.L44
 512:Generated_Source\PSoC4/MyADC.c ****     {
 513:Generated_Source\PSoC4/MyADC.c ****         result = CY_GET_REG32((reg32 *)(MyADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 634              		.loc 1 513 0
 635 001a 7B68     		ldr	r3, [r7, #4]
 636 001c 9B00     		lsls	r3, r3, #2
 637 001e 084A     		ldr	r2, .L47
 638 0020 9446     		mov	ip, r2
 639 0022 6344     		add	r3, r3, ip
 640 0024 1B68     		ldr	r3, [r3]
 641 0026 1B04     		lsls	r3, r3, #16
 642 0028 1B0C     		lsrs	r3, r3, #16
 643 002a FB60     		str	r3, [r7, #12]
 644 002c 01E0     		b	.L45
 645              	.L44:
 514:Generated_Source\PSoC4/MyADC.c ****                 MyADC_RESULT_MASK;
 515:Generated_Source\PSoC4/MyADC.c ****     }
 516:Generated_Source\PSoC4/MyADC.c ****     else
 517:Generated_Source\PSoC4/MyADC.c ****     {
 518:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/MyADC.c ****             result = MyADC_SAR_INJ_RESULT_REG & MyADC_RESULT_MASK;
 520:Generated_Source\PSoC4/MyADC.c ****         #else
 521:Generated_Source\PSoC4/MyADC.c ****             result = 0u;
 646              		.loc 1 521 0
 647 002e 0023     		movs	r3, #0
 648 0030 FB60     		str	r3, [r7, #12]
 649              	.L45:
 522:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/MyADC.c ****     }
 524:Generated_Source\PSoC4/MyADC.c **** 
 525:Generated_Source\PSoC4/MyADC.c ****     return ( (int16)result );
 650              		.loc 1 525 0
 651 0032 FB68     		ldr	r3, [r7, #12]
 652 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/MyADC.c **** }
 653              		.loc 1 526 0
 654 0036 1800     		movs	r0, r3
 655 0038 BD46     		mov	sp, r7
 656 003a 04B0     		add	sp, sp, #16
 657              		@ sp needed
 658 003c 80BD     		pop	{r7, pc}
 659              	.L48:
 660 003e C046     		.align	2
 661              	.L47:
 662 0040 80013A40 		.word	1077543296
 663              		.cfi_endproc
 664              	.LFE9:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 22


 665              		.size	MyADC_GetResult16, .-MyADC_GetResult16
 666              		.section	.text.MyADC_SetChanMask,"ax",%progbits
 667              		.align	2
 668              		.global	MyADC_SetChanMask
 669              		.code	16
 670              		.thumb_func
 671              		.type	MyADC_SetChanMask, %function
 672              	MyADC_SetChanMask:
 673              	.LFB10:
 527:Generated_Source\PSoC4/MyADC.c **** 
 528:Generated_Source\PSoC4/MyADC.c **** 
 529:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetChanMask
 531:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/MyADC.c **** *
 533:Generated_Source\PSoC4/MyADC.c **** * Summary:
 534:Generated_Source\PSoC4/MyADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/MyADC.c **** *
 536:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 537:Generated_Source\PSoC4/MyADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/MyADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/MyADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/MyADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/MyADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/MyADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/MyADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/MyADC.c **** *
 545:Generated_Source\PSoC4/MyADC.c **** * Return:
 546:Generated_Source\PSoC4/MyADC.c **** *  None.
 547:Generated_Source\PSoC4/MyADC.c **** *
 548:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/MyADC.c **** {
 674              		.loc 1 550 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 8
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 82B0     		sub	sp, sp, #8
 683              		.cfi_def_cfa_offset 16
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_CHAN_EN_REG = mask & MyADC_MAX_CHANNELS_EN_MASK;
 687              		.loc 1 551 0
 688 0008 044B     		ldr	r3, .L50
 689 000a 7A68     		ldr	r2, [r7, #4]
 690 000c 0121     		movs	r1, #1
 691 000e 0A40     		ands	r2, r1
 692 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/MyADC.c **** }
 693              		.loc 1 552 0
 694 0012 C046     		nop
 695 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 23


 696 0016 02B0     		add	sp, sp, #8
 697              		@ sp needed
 698 0018 80BD     		pop	{r7, pc}
 699              	.L51:
 700 001a C046     		.align	2
 701              	.L50:
 702 001c 20003A40 		.word	1077542944
 703              		.cfi_endproc
 704              	.LFE10:
 705              		.size	MyADC_SetChanMask, .-MyADC_SetChanMask
 706              		.section	.text.MyADC_SetLowLimit,"ax",%progbits
 707              		.align	2
 708              		.global	MyADC_SetLowLimit
 709              		.code	16
 710              		.thumb_func
 711              		.type	MyADC_SetLowLimit, %function
 712              	MyADC_SetLowLimit:
 713              	.LFB11:
 553:Generated_Source\PSoC4/MyADC.c **** 
 554:Generated_Source\PSoC4/MyADC.c **** #if(MyADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/MyADC.c **** 
 556:Generated_Source\PSoC4/MyADC.c **** 
 557:Generated_Source\PSoC4/MyADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/MyADC.c ****     * Function Name: MyADC_EnableInjection
 559:Generated_Source\PSoC4/MyADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/MyADC.c ****     *
 561:Generated_Source\PSoC4/MyADC.c ****     * Summary:
 562:Generated_Source\PSoC4/MyADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/MyADC.c ****     *
 564:Generated_Source\PSoC4/MyADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/MyADC.c ****     *  None.
 566:Generated_Source\PSoC4/MyADC.c ****     *
 567:Generated_Source\PSoC4/MyADC.c ****     * Return:
 568:Generated_Source\PSoC4/MyADC.c ****     *  None.
 569:Generated_Source\PSoC4/MyADC.c ****     *
 570:Generated_Source\PSoC4/MyADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/MyADC.c ****     void MyADC_EnableInjection(void)
 572:Generated_Source\PSoC4/MyADC.c ****     {
 573:Generated_Source\PSoC4/MyADC.c ****         MyADC_SAR_INJ_CHAN_CONFIG_REG |= MyADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/MyADC.c ****     }
 575:Generated_Source\PSoC4/MyADC.c **** 
 576:Generated_Source\PSoC4/MyADC.c **** #endif /* MyADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/MyADC.c **** 
 578:Generated_Source\PSoC4/MyADC.c **** 
 579:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetLowLimit
 581:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/MyADC.c **** *
 583:Generated_Source\PSoC4/MyADC.c **** * Summary:
 584:Generated_Source\PSoC4/MyADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/MyADC.c **** *
 586:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 587:Generated_Source\PSoC4/MyADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/MyADC.c **** *
 589:Generated_Source\PSoC4/MyADC.c **** * Return:
 590:Generated_Source\PSoC4/MyADC.c **** *  None.
 591:Generated_Source\PSoC4/MyADC.c **** *
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 24


 592:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/MyADC.c **** {
 714              		.loc 1 594 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 8
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718 0000 80B5     		push	{r7, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 82B0     		sub	sp, sp, #8
 723              		.cfi_def_cfa_offset 16
 724 0004 00AF     		add	r7, sp, #0
 725              		.cfi_def_cfa_register 7
 726 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_THRES_REG &= (uint32)(~MyADC_RANGE_LOW_MASK);
 727              		.loc 1 595 0
 728 0008 084B     		ldr	r3, .L53
 729 000a 084A     		ldr	r2, .L53
 730 000c 1268     		ldr	r2, [r2]
 731 000e 120C     		lsrs	r2, r2, #16
 732 0010 1204     		lsls	r2, r2, #16
 733 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_THRES_REG |= lowLimit & MyADC_RANGE_LOW_MASK;
 734              		.loc 1 596 0
 735 0014 054B     		ldr	r3, .L53
 736 0016 054A     		ldr	r2, .L53
 737 0018 1168     		ldr	r1, [r2]
 738 001a 7A68     		ldr	r2, [r7, #4]
 739 001c 1204     		lsls	r2, r2, #16
 740 001e 120C     		lsrs	r2, r2, #16
 741 0020 0A43     		orrs	r2, r1
 742 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/MyADC.c **** }
 743              		.loc 1 597 0
 744 0024 C046     		nop
 745 0026 BD46     		mov	sp, r7
 746 0028 02B0     		add	sp, sp, #8
 747              		@ sp needed
 748 002a 80BD     		pop	{r7, pc}
 749              	.L54:
 750              		.align	2
 751              	.L53:
 752 002c 18003A40 		.word	1077542936
 753              		.cfi_endproc
 754              	.LFE11:
 755              		.size	MyADC_SetLowLimit, .-MyADC_SetLowLimit
 756              		.section	.text.MyADC_SetHighLimit,"ax",%progbits
 757              		.align	2
 758              		.global	MyADC_SetHighLimit
 759              		.code	16
 760              		.thumb_func
 761              		.type	MyADC_SetHighLimit, %function
 762              	MyADC_SetHighLimit:
 763              	.LFB12:
 598:Generated_Source\PSoC4/MyADC.c **** 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 25


 599:Generated_Source\PSoC4/MyADC.c **** 
 600:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetHighLimit
 602:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/MyADC.c **** *
 604:Generated_Source\PSoC4/MyADC.c **** * Summary:
 605:Generated_Source\PSoC4/MyADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/MyADC.c **** *
 607:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 608:Generated_Source\PSoC4/MyADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/MyADC.c **** *
 610:Generated_Source\PSoC4/MyADC.c **** * Return:
 611:Generated_Source\PSoC4/MyADC.c **** *  None.
 612:Generated_Source\PSoC4/MyADC.c **** *
 613:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/MyADC.c **** {
 764              		.loc 1 615 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 8
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_THRES_REG &= (uint32)(~MyADC_RANGE_HIGH_MASK);
 777              		.loc 1 616 0
 778 0008 084B     		ldr	r3, .L56
 779 000a 084A     		ldr	r2, .L56
 780 000c 1268     		ldr	r2, [r2]
 781 000e 1204     		lsls	r2, r2, #16
 782 0010 120C     		lsrs	r2, r2, #16
 783 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << MyADC_RANGE_HIGH_OFFSET);
 784              		.loc 1 617 0
 785 0014 054B     		ldr	r3, .L56
 786 0016 054A     		ldr	r2, .L56
 787 0018 1168     		ldr	r1, [r2]
 788 001a 7A68     		ldr	r2, [r7, #4]
 789 001c 1204     		lsls	r2, r2, #16
 790 001e 0A43     		orrs	r2, r1
 791 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/MyADC.c **** }
 792              		.loc 1 618 0
 793 0022 C046     		nop
 794 0024 BD46     		mov	sp, r7
 795 0026 02B0     		add	sp, sp, #8
 796              		@ sp needed
 797 0028 80BD     		pop	{r7, pc}
 798              	.L57:
 799 002a C046     		.align	2
 800              	.L56:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 26


 801 002c 18003A40 		.word	1077542936
 802              		.cfi_endproc
 803              	.LFE12:
 804              		.size	MyADC_SetHighLimit, .-MyADC_SetHighLimit
 805              		.section	.text.MyADC_SetLimitMask,"ax",%progbits
 806              		.align	2
 807              		.global	MyADC_SetLimitMask
 808              		.code	16
 809              		.thumb_func
 810              		.type	MyADC_SetLimitMask, %function
 811              	MyADC_SetLimitMask:
 812              	.LFB13:
 619:Generated_Source\PSoC4/MyADC.c **** 
 620:Generated_Source\PSoC4/MyADC.c **** 
 621:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetLimitMask
 623:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/MyADC.c **** *
 625:Generated_Source\PSoC4/MyADC.c **** * Summary:
 626:Generated_Source\PSoC4/MyADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/MyADC.c **** *
 628:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 629:Generated_Source\PSoC4/MyADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/MyADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/MyADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/MyADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/MyADC.c **** *
 634:Generated_Source\PSoC4/MyADC.c **** * Return:
 635:Generated_Source\PSoC4/MyADC.c **** *  None.
 636:Generated_Source\PSoC4/MyADC.c **** *
 637:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/MyADC.c **** {
 813              		.loc 1 639 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 8
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817 0000 80B5     		push	{r7, lr}
 818              		.cfi_def_cfa_offset 8
 819              		.cfi_offset 7, -8
 820              		.cfi_offset 14, -4
 821 0002 82B0     		sub	sp, sp, #8
 822              		.cfi_def_cfa_offset 16
 823 0004 00AF     		add	r7, sp, #0
 824              		.cfi_def_cfa_register 7
 825 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_RANGE_INTR_MASK_REG = mask & MyADC_MAX_CHANNELS_EN_MASK;
 826              		.loc 1 640 0
 827 0008 044B     		ldr	r3, .L59
 828 000a 7A68     		ldr	r2, [r7, #4]
 829 000c 0121     		movs	r1, #1
 830 000e 0A40     		ands	r2, r1
 831 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/MyADC.c **** }
 832              		.loc 1 641 0
 833 0012 C046     		nop
 834 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 27


 835 0016 02B0     		add	sp, sp, #8
 836              		@ sp needed
 837 0018 80BD     		pop	{r7, pc}
 838              	.L60:
 839 001a C046     		.align	2
 840              	.L59:
 841 001c 38023A40 		.word	1077543480
 842              		.cfi_endproc
 843              	.LFE13:
 844              		.size	MyADC_SetLimitMask, .-MyADC_SetLimitMask
 845              		.section	.text.MyADC_SetSatMask,"ax",%progbits
 846              		.align	2
 847              		.global	MyADC_SetSatMask
 848              		.code	16
 849              		.thumb_func
 850              		.type	MyADC_SetSatMask, %function
 851              	MyADC_SetSatMask:
 852              	.LFB14:
 642:Generated_Source\PSoC4/MyADC.c **** 
 643:Generated_Source\PSoC4/MyADC.c **** 
 644:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetSatMask
 646:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/MyADC.c **** *
 648:Generated_Source\PSoC4/MyADC.c **** * Summary:
 649:Generated_Source\PSoC4/MyADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/MyADC.c **** *
 651:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 652:Generated_Source\PSoC4/MyADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/MyADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/MyADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/MyADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/MyADC.c **** *
 657:Generated_Source\PSoC4/MyADC.c **** * Return:
 658:Generated_Source\PSoC4/MyADC.c **** *  None.
 659:Generated_Source\PSoC4/MyADC.c **** *
 660:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/MyADC.c **** {
 853              		.loc 1 662 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 8
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 0000 80B5     		push	{r7, lr}
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 82B0     		sub	sp, sp, #8
 862              		.cfi_def_cfa_offset 16
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/MyADC.c ****     MyADC_SAR_SATURATE_INTR_MASK_REG = mask & MyADC_MAX_CHANNELS_EN_MASK;
 866              		.loc 1 663 0
 867 0008 044B     		ldr	r3, .L62
 868 000a 7A68     		ldr	r2, [r7, #4]
 869 000c 0121     		movs	r1, #1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 28


 870 000e 0A40     		ands	r2, r1
 871 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/MyADC.c **** }
 872              		.loc 1 664 0
 873 0012 C046     		nop
 874 0014 BD46     		mov	sp, r7
 875 0016 02B0     		add	sp, sp, #8
 876              		@ sp needed
 877 0018 80BD     		pop	{r7, pc}
 878              	.L63:
 879 001a C046     		.align	2
 880              	.L62:
 881 001c 28023A40 		.word	1077543464
 882              		.cfi_endproc
 883              	.LFE14:
 884              		.size	MyADC_SetSatMask, .-MyADC_SetSatMask
 885              		.section	.text.MyADC_SetOffset,"ax",%progbits
 886              		.align	2
 887              		.global	MyADC_SetOffset
 888              		.code	16
 889              		.thumb_func
 890              		.type	MyADC_SetOffset, %function
 891              	MyADC_SetOffset:
 892              	.LFB15:
 665:Generated_Source\PSoC4/MyADC.c **** 
 666:Generated_Source\PSoC4/MyADC.c **** 
 667:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetOffset
 669:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/MyADC.c **** *
 671:Generated_Source\PSoC4/MyADC.c **** * Summary:
 672:Generated_Source\PSoC4/MyADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/MyADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/MyADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/MyADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/MyADC.c **** *
 677:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 678:Generated_Source\PSoC4/MyADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/MyADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/MyADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/MyADC.c **** *
 682:Generated_Source\PSoC4/MyADC.c **** * Return:
 683:Generated_Source\PSoC4/MyADC.c **** *  None.
 684:Generated_Source\PSoC4/MyADC.c **** *
 685:Generated_Source\PSoC4/MyADC.c **** * Global variables:
 686:Generated_Source\PSoC4/MyADC.c **** *  MyADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/MyADC.c **** *
 688:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/MyADC.c **** {
 893              		.loc 1 690 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 8
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897 0000 80B5     		push	{r7, lr}
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 7, -8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 29


 900              		.cfi_offset 14, -4
 901 0002 82B0     		sub	sp, sp, #8
 902              		.cfi_def_cfa_offset 16
 903 0004 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
 905 0006 7860     		str	r0, [r7, #4]
 906 0008 0A00     		movs	r2, r1
 907 000a BB1C     		adds	r3, r7, #2
 908 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/MyADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/MyADC.c ****     CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 909              		.loc 1 692 0
 910 000e 7B68     		ldr	r3, [r7, #4]
 911 0010 002B     		cmp	r3, #0
 912 0012 02D0     		beq	.L65
 913              		.loc 1 692 0 is_stmt 0 discriminator 1
 914 0014 0020     		movs	r0, #0
 915 0016 FFF7FEFF 		bl	CyHalt
 916              	.L65:
 693:Generated_Source\PSoC4/MyADC.c **** 
 694:Generated_Source\PSoC4/MyADC.c ****     MyADC_offset[chan] = offset;
 917              		.loc 1 694 0 is_stmt 1
 918 001a 054B     		ldr	r3, .L66
 919 001c 7A68     		ldr	r2, [r7, #4]
 920 001e 5200     		lsls	r2, r2, #1
 921 0020 B91C     		adds	r1, r7, #2
 922 0022 0988     		ldrh	r1, [r1]
 923 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/MyADC.c **** }
 924              		.loc 1 695 0
 925 0026 C046     		nop
 926 0028 BD46     		mov	sp, r7
 927 002a 02B0     		add	sp, sp, #8
 928              		@ sp needed
 929 002c 80BD     		pop	{r7, pc}
 930              	.L67:
 931 002e C046     		.align	2
 932              	.L66:
 933 0030 00000000 		.word	MyADC_offset
 934              		.cfi_endproc
 935              	.LFE15:
 936              		.size	MyADC_SetOffset, .-MyADC_SetOffset
 937              		.section	.text.MyADC_SetGain,"ax",%progbits
 938              		.align	2
 939              		.global	MyADC_SetGain
 940              		.code	16
 941              		.thumb_func
 942              		.type	MyADC_SetGain, %function
 943              	MyADC_SetGain:
 944              	.LFB16:
 696:Generated_Source\PSoC4/MyADC.c **** 
 697:Generated_Source\PSoC4/MyADC.c **** 
 698:Generated_Source\PSoC4/MyADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/MyADC.c **** * Function Name: MyADC_SetGain
 700:Generated_Source\PSoC4/MyADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/MyADC.c **** *
 702:Generated_Source\PSoC4/MyADC.c **** * Summary:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 30


 703:Generated_Source\PSoC4/MyADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/MyADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/MyADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/MyADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/MyADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/MyADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/MyADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/MyADC.c **** *
 711:Generated_Source\PSoC4/MyADC.c **** * Parameters:
 712:Generated_Source\PSoC4/MyADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/MyADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/MyADC.c **** *
 715:Generated_Source\PSoC4/MyADC.c **** * Return:
 716:Generated_Source\PSoC4/MyADC.c **** *  None.
 717:Generated_Source\PSoC4/MyADC.c **** *
 718:Generated_Source\PSoC4/MyADC.c **** * Global variables:
 719:Generated_Source\PSoC4/MyADC.c **** *  MyADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/MyADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/MyADC.c **** *
 722:Generated_Source\PSoC4/MyADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/MyADC.c **** void MyADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/MyADC.c **** {
 945              		.loc 1 724 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 8
 948              		@ frame_needed = 1, uses_anonymous_args = 0
 949 0000 80B5     		push	{r7, lr}
 950              		.cfi_def_cfa_offset 8
 951              		.cfi_offset 7, -8
 952              		.cfi_offset 14, -4
 953 0002 82B0     		sub	sp, sp, #8
 954              		.cfi_def_cfa_offset 16
 955 0004 00AF     		add	r7, sp, #0
 956              		.cfi_def_cfa_register 7
 957 0006 7860     		str	r0, [r7, #4]
 958 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/MyADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/MyADC.c ****     CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 959              		.loc 1 726 0
 960 000a 7B68     		ldr	r3, [r7, #4]
 961 000c 002B     		cmp	r3, #0
 962 000e 02D0     		beq	.L69
 963              		.loc 1 726 0 is_stmt 0 discriminator 1
 964 0010 0020     		movs	r0, #0
 965 0012 FFF7FEFF 		bl	CyHalt
 966              	.L69:
 727:Generated_Source\PSoC4/MyADC.c **** 
 728:Generated_Source\PSoC4/MyADC.c ****     MyADC_countsPer10Volt[chan] = adcGain;
 967              		.loc 1 728 0 is_stmt 1
 968 0016 044B     		ldr	r3, .L70
 969 0018 7A68     		ldr	r2, [r7, #4]
 970 001a 9200     		lsls	r2, r2, #2
 971 001c 3968     		ldr	r1, [r7]
 972 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/MyADC.c **** }
 973              		.loc 1 729 0
 974 0020 C046     		nop
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 31


 975 0022 BD46     		mov	sp, r7
 976 0024 02B0     		add	sp, sp, #8
 977              		@ sp needed
 978 0026 80BD     		pop	{r7, pc}
 979              	.L71:
 980              		.align	2
 981              	.L70:
 982 0028 00000000 		.word	MyADC_countsPer10Volt
 983              		.cfi_endproc
 984              	.LFE16:
 985              		.size	MyADC_SetGain, .-MyADC_SetGain
 986              		.global	__aeabi_idiv
 987              		.section	.text.MyADC_CountsTo_mVolts,"ax",%progbits
 988              		.align	2
 989              		.global	MyADC_CountsTo_mVolts
 990              		.code	16
 991              		.thumb_func
 992              		.type	MyADC_CountsTo_mVolts, %function
 993              	MyADC_CountsTo_mVolts:
 994              	.LFB17:
 730:Generated_Source\PSoC4/MyADC.c **** 
 731:Generated_Source\PSoC4/MyADC.c **** 
 732:Generated_Source\PSoC4/MyADC.c **** #if(MyADC_DEFAULT_JUSTIFICATION_SEL == MyADC__RIGHT)
 733:Generated_Source\PSoC4/MyADC.c **** 
 734:Generated_Source\PSoC4/MyADC.c **** 
 735:Generated_Source\PSoC4/MyADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/MyADC.c ****     * Function Name: MyADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/MyADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/MyADC.c ****     *
 739:Generated_Source\PSoC4/MyADC.c ****     * Summary:
 740:Generated_Source\PSoC4/MyADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/MyADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/MyADC.c ****     *
 743:Generated_Source\PSoC4/MyADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/MyADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/MyADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/MyADC.c ****     *
 747:Generated_Source\PSoC4/MyADC.c ****     * Return:
 748:Generated_Source\PSoC4/MyADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/MyADC.c ****     *
 750:Generated_Source\PSoC4/MyADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/MyADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/MyADC.c ****     *
 755:Generated_Source\PSoC4/MyADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/MyADC.c ****     int16 MyADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/MyADC.c ****     {
 995              		.loc 1 757 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 16
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999 0000 80B5     		push	{r7, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 32


 1004              		.cfi_def_cfa_offset 24
 1005 0004 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 0006 7860     		str	r0, [r7, #4]
 1008 0008 0A00     		movs	r2, r1
 1009 000a BB1C     		adds	r3, r7, #2
 1010 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/MyADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/MyADC.c **** 
 760:Generated_Source\PSoC4/MyADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/MyADC.c ****         CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 1011              		.loc 1 761 0
 1012 000e 7B68     		ldr	r3, [r7, #4]
 1013 0010 002B     		cmp	r3, #0
 1014 0012 02D0     		beq	.L73
 1015              		.loc 1 761 0 is_stmt 0 discriminator 1
 1016 0014 0020     		movs	r0, #0
 1017 0016 FFF7FEFF 		bl	CyHalt
 1018              	.L73:
 762:Generated_Source\PSoC4/MyADC.c **** 
 763:Generated_Source\PSoC4/MyADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE)
 765:Generated_Source\PSoC4/MyADC.c ****             if((MyADC_channelsConfig[chan] & MyADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/MyADC.c ****             {
 767:Generated_Source\PSoC4/MyADC.c ****                 adcCounts /= MyADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/MyADC.c ****             }
 769:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE */
 770:Generated_Source\PSoC4/MyADC.c **** 
 771:Generated_Source\PSoC4/MyADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/MyADC.c ****         adcCounts -= MyADC_offset[chan];
 1019              		.loc 1 772 0 is_stmt 1
 1020 001a 1E4B     		ldr	r3, .L79
 1021 001c 7A68     		ldr	r2, [r7, #4]
 1022 001e 5200     		lsls	r2, r2, #1
 1023 0020 D35A     		ldrh	r3, [r2, r3]
 1024 0022 19B2     		sxth	r1, r3
 1025 0024 BB1C     		adds	r3, r7, #2
 1026 0026 1A88     		ldrh	r2, [r3]
 1027 0028 8BB2     		uxth	r3, r1
 1028 002a D31A     		subs	r3, r2, r3
 1029 002c 9AB2     		uxth	r2, r3
 1030 002e BB1C     		adds	r3, r7, #2
 1031 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/MyADC.c **** 
 774:Generated_Source\PSoC4/MyADC.c ****         mVolts = (int16)((((int32)adcCounts * MyADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1032              		.loc 1 774 0
 1033 0032 BB1C     		adds	r3, r7, #2
 1034 0034 0022     		movs	r2, #0
 1035 0036 9B5E     		ldrsh	r3, [r3, r2]
 1036 0038 174A     		ldr	r2, .L79+4
 1037 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/MyADC.c ****                  (MyADC_countsPer10Volt[chan] / 2) : (-(MyADC_countsPer10Volt[chan] / 2)) ))
 1038              		.loc 1 775 0
 1039 003c BB1C     		adds	r3, r7, #2
 1040 003e 0021     		movs	r1, #0
 1041 0040 5B5E     		ldrsh	r3, [r3, r1]
 1042 0042 002B     		cmp	r3, #0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 33


 1043 0044 08DD     		ble	.L74
 1044              		.loc 1 775 0 is_stmt 0 discriminator 1
 1045 0046 154B     		ldr	r3, .L79+8
 1046 0048 7968     		ldr	r1, [r7, #4]
 1047 004a 8900     		lsls	r1, r1, #2
 1048 004c CB58     		ldr	r3, [r1, r3]
 1049 004e 002B     		cmp	r3, #0
 1050 0050 00DA     		bge	.L75
 1051 0052 0133     		adds	r3, r3, #1
 1052              	.L75:
 1053 0054 5B10     		asrs	r3, r3, #1
 1054 0056 08E0     		b	.L76
 1055              	.L74:
 1056              		.loc 1 775 0 discriminator 2
 1057 0058 104B     		ldr	r3, .L79+8
 1058 005a 7968     		ldr	r1, [r7, #4]
 1059 005c 8900     		lsls	r1, r1, #2
 1060 005e CB58     		ldr	r3, [r1, r3]
 1061 0060 002B     		cmp	r3, #0
 1062 0062 00DA     		bge	.L77
 1063 0064 0133     		adds	r3, r3, #1
 1064              	.L77:
 1065 0066 5B10     		asrs	r3, r3, #1
 1066 0068 5B42     		rsbs	r3, r3, #0
 1067              	.L76:
 774:Generated_Source\PSoC4/MyADC.c ****                  (MyADC_countsPer10Volt[chan] / 2) : (-(MyADC_countsPer10Volt[chan] / 2)) ))
 1068              		.loc 1 774 0 is_stmt 1
 1069 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/MyADC.c ****                  / MyADC_countsPer10Volt[chan]);
 1070              		.loc 1 776 0
 1071 006c 0B4B     		ldr	r3, .L79+8
 1072 006e 7A68     		ldr	r2, [r7, #4]
 1073 0070 9200     		lsls	r2, r2, #2
 1074 0072 D358     		ldr	r3, [r2, r3]
 1075 0074 1900     		movs	r1, r3
 1076 0076 FFF7FEFF 		bl	__aeabi_idiv
 1077 007a 0300     		movs	r3, r0
 1078 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/MyADC.c ****                  (MyADC_countsPer10Volt[chan] / 2) : (-(MyADC_countsPer10Volt[chan] / 2)) ))
 1079              		.loc 1 774 0
 1080 007e 0E23     		movs	r3, #14
 1081 0080 FB18     		adds	r3, r7, r3
 1082 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/MyADC.c **** 
 778:Generated_Source\PSoC4/MyADC.c ****         return( mVolts );
 1083              		.loc 1 778 0
 1084 0084 0E23     		movs	r3, #14
 1085 0086 FB18     		adds	r3, r7, r3
 1086 0088 0022     		movs	r2, #0
 1087 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/MyADC.c ****     }
 1088              		.loc 1 779 0
 1089 008c 1800     		movs	r0, r3
 1090 008e BD46     		mov	sp, r7
 1091 0090 04B0     		add	sp, sp, #16
 1092              		@ sp needed
 1093 0092 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 34


 1094              	.L80:
 1095              		.align	2
 1096              	.L79:
 1097 0094 00000000 		.word	MyADC_offset
 1098 0098 10270000 		.word	10000
 1099 009c 00000000 		.word	MyADC_countsPer10Volt
 1100              		.cfi_endproc
 1101              	.LFE17:
 1102              		.size	MyADC_CountsTo_mVolts, .-MyADC_CountsTo_mVolts
 1103              		.global	__aeabi_lmul
 1104              		.global	__aeabi_ldivmod
 1105              		.section	.text.MyADC_CountsTo_uVolts,"ax",%progbits
 1106              		.align	2
 1107              		.global	MyADC_CountsTo_uVolts
 1108              		.code	16
 1109              		.thumb_func
 1110              		.type	MyADC_CountsTo_uVolts, %function
 1111              	MyADC_CountsTo_uVolts:
 1112              	.LFB18:
 780:Generated_Source\PSoC4/MyADC.c **** 
 781:Generated_Source\PSoC4/MyADC.c **** 
 782:Generated_Source\PSoC4/MyADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/MyADC.c ****     * Function Name: MyADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/MyADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/MyADC.c ****     *
 786:Generated_Source\PSoC4/MyADC.c ****     * Summary:
 787:Generated_Source\PSoC4/MyADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/MyADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/MyADC.c ****     *
 790:Generated_Source\PSoC4/MyADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/MyADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/MyADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/MyADC.c ****     *
 794:Generated_Source\PSoC4/MyADC.c ****     * Return:
 795:Generated_Source\PSoC4/MyADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/MyADC.c ****     *
 797:Generated_Source\PSoC4/MyADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/MyADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/MyADC.c ****     *
 802:Generated_Source\PSoC4/MyADC.c ****     * Theory:
 803:Generated_Source\PSoC4/MyADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/MyADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/MyADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/MyADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/MyADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/MyADC.c ****     *
 809:Generated_Source\PSoC4/MyADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/MyADC.c ****     int32 MyADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/MyADC.c ****     {
 1113              		.loc 1 811 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 24
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117 0000 B0B5     		push	{r4, r5, r7, lr}
 1118              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 35


 1119              		.cfi_offset 4, -16
 1120              		.cfi_offset 5, -12
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 86B0     		sub	sp, sp, #24
 1124              		.cfi_def_cfa_offset 40
 1125 0004 00AF     		add	r7, sp, #0
 1126              		.cfi_def_cfa_register 7
 1127 0006 F860     		str	r0, [r7, #12]
 1128 0008 0A00     		movs	r2, r1
 1129 000a 0A23     		movs	r3, #10
 1130 000c FB18     		adds	r3, r7, r3
 1131 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/MyADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/MyADC.c **** 
 814:Generated_Source\PSoC4/MyADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/MyADC.c ****         CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 1132              		.loc 1 815 0
 1133 0010 FB68     		ldr	r3, [r7, #12]
 1134 0012 002B     		cmp	r3, #0
 1135 0014 02D0     		beq	.L82
 1136              		.loc 1 815 0 is_stmt 0 discriminator 1
 1137 0016 0020     		movs	r0, #0
 1138 0018 FFF7FEFF 		bl	CyHalt
 1139              	.L82:
 816:Generated_Source\PSoC4/MyADC.c **** 
 817:Generated_Source\PSoC4/MyADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE)
 819:Generated_Source\PSoC4/MyADC.c ****             if((MyADC_channelsConfig[chan] & MyADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/MyADC.c ****             {
 821:Generated_Source\PSoC4/MyADC.c ****                 adcCounts /= MyADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/MyADC.c ****             }
 823:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE */
 824:Generated_Source\PSoC4/MyADC.c **** 
 825:Generated_Source\PSoC4/MyADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/MyADC.c ****         adcCounts -= MyADC_offset[chan];
 1140              		.loc 1 826 0 is_stmt 1
 1141 001c 194B     		ldr	r3, .L84
 1142 001e FA68     		ldr	r2, [r7, #12]
 1143 0020 5200     		lsls	r2, r2, #1
 1144 0022 D35A     		ldrh	r3, [r2, r3]
 1145 0024 19B2     		sxth	r1, r3
 1146 0026 0A23     		movs	r3, #10
 1147 0028 FB18     		adds	r3, r7, r3
 1148 002a 1A88     		ldrh	r2, [r3]
 1149 002c 8BB2     		uxth	r3, r1
 1150 002e D31A     		subs	r3, r2, r3
 1151 0030 9AB2     		uxth	r2, r3
 1152 0032 0A23     		movs	r3, #10
 1153 0034 FB18     		adds	r3, r7, r3
 1154 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/MyADC.c **** 
 828:Generated_Source\PSoC4/MyADC.c ****         uVolts = ((int64)adcCounts * MyADC_10UV_COUNTS) / MyADC_countsPer10Volt[chan];
 1155              		.loc 1 828 0
 1156 0038 0A23     		movs	r3, #10
 1157 003a FB18     		adds	r3, r7, r3
 1158 003c 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 36


 1159 003e 1BB2     		sxth	r3, r3
 1160 0040 3B60     		str	r3, [r7]
 1161 0042 DB17     		asrs	r3, r3, #31
 1162 0044 7B60     		str	r3, [r7, #4]
 1163 0046 104A     		ldr	r2, .L84+4
 1164 0048 0023     		movs	r3, #0
 1165 004a 3868     		ldr	r0, [r7]
 1166 004c 7968     		ldr	r1, [r7, #4]
 1167 004e FFF7FEFF 		bl	__aeabi_lmul
 1168 0052 0200     		movs	r2, r0
 1169 0054 0B00     		movs	r3, r1
 1170 0056 1000     		movs	r0, r2
 1171 0058 1900     		movs	r1, r3
 1172 005a 0C4B     		ldr	r3, .L84+8
 1173 005c FA68     		ldr	r2, [r7, #12]
 1174 005e 9200     		lsls	r2, r2, #2
 1175 0060 D358     		ldr	r3, [r2, r3]
 1176 0062 1C00     		movs	r4, r3
 1177 0064 DB17     		asrs	r3, r3, #31
 1178 0066 1D00     		movs	r5, r3
 1179 0068 2200     		movs	r2, r4
 1180 006a 2B00     		movs	r3, r5
 1181 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1182 0070 0300     		movs	r3, r0
 1183 0072 0C00     		movs	r4, r1
 1184 0074 3B61     		str	r3, [r7, #16]
 1185 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/MyADC.c **** 
 830:Generated_Source\PSoC4/MyADC.c ****         return( (int32)uVolts );
 1186              		.loc 1 830 0
 1187 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/MyADC.c ****     }
 1188              		.loc 1 831 0
 1189 007a 1800     		movs	r0, r3
 1190 007c BD46     		mov	sp, r7
 1191 007e 06B0     		add	sp, sp, #24
 1192              		@ sp needed
 1193 0080 B0BD     		pop	{r4, r5, r7, pc}
 1194              	.L85:
 1195 0082 C046     		.align	2
 1196              	.L84:
 1197 0084 00000000 		.word	MyADC_offset
 1198 0088 80969800 		.word	10000000
 1199 008c 00000000 		.word	MyADC_countsPer10Volt
 1200              		.cfi_endproc
 1201              	.LFE18:
 1202              		.size	MyADC_CountsTo_uVolts, .-MyADC_CountsTo_uVolts
 1203              		.global	__aeabi_i2f
 1204              		.global	__aeabi_fmul
 1205              		.global	__aeabi_fdiv
 1206              		.section	.text.MyADC_CountsTo_Volts,"ax",%progbits
 1207              		.align	2
 1208              		.global	MyADC_CountsTo_Volts
 1209              		.code	16
 1210              		.thumb_func
 1211              		.type	MyADC_CountsTo_Volts, %function
 1212              	MyADC_CountsTo_Volts:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 37


 1213              	.LFB19:
 832:Generated_Source\PSoC4/MyADC.c **** 
 833:Generated_Source\PSoC4/MyADC.c **** 
 834:Generated_Source\PSoC4/MyADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/MyADC.c ****     * Function Name: MyADC_CountsTo_Volts
 836:Generated_Source\PSoC4/MyADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/MyADC.c ****     *
 838:Generated_Source\PSoC4/MyADC.c ****     * Summary:
 839:Generated_Source\PSoC4/MyADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/MyADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/MyADC.c ****     *
 842:Generated_Source\PSoC4/MyADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/MyADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/MyADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/MyADC.c ****     *
 846:Generated_Source\PSoC4/MyADC.c ****     * Return:
 847:Generated_Source\PSoC4/MyADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/MyADC.c ****     *
 849:Generated_Source\PSoC4/MyADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/MyADC.c ****     *  MyADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/MyADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/MyADC.c ****     *
 854:Generated_Source\PSoC4/MyADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/MyADC.c ****     float32 MyADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/MyADC.c ****     {
 1214              		.loc 1 856 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 16
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218 0000 90B5     		push	{r4, r7, lr}
 1219              		.cfi_def_cfa_offset 12
 1220              		.cfi_offset 4, -12
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 0002 85B0     		sub	sp, sp, #20
 1224              		.cfi_def_cfa_offset 32
 1225 0004 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 0006 7860     		str	r0, [r7, #4]
 1228 0008 0A00     		movs	r2, r1
 1229 000a BB1C     		adds	r3, r7, #2
 1230 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/MyADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/MyADC.c **** 
 859:Generated_Source\PSoC4/MyADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/MyADC.c ****         CYASSERT(chan < MyADC_TOTAL_CHANNELS_NUM);
 1231              		.loc 1 860 0
 1232 000e 7B68     		ldr	r3, [r7, #4]
 1233 0010 002B     		cmp	r3, #0
 1234 0012 02D0     		beq	.L87
 1235              		.loc 1 860 0 is_stmt 0 discriminator 1
 1236 0014 0020     		movs	r0, #0
 1237 0016 FFF7FEFF 		bl	CyHalt
 1238              	.L87:
 861:Generated_Source\PSoC4/MyADC.c **** 
 862:Generated_Source\PSoC4/MyADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 38


 863:Generated_Source\PSoC4/MyADC.c ****         #if(MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE)
 864:Generated_Source\PSoC4/MyADC.c ****             if((MyADC_channelsConfig[chan] & MyADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/MyADC.c ****             {
 866:Generated_Source\PSoC4/MyADC.c ****                 adcCounts /= MyADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/MyADC.c ****             }
 868:Generated_Source\PSoC4/MyADC.c ****         #endif /* MyADC_DEFAULT_AVG_MODE == MyADC__ACCUMULATE */
 869:Generated_Source\PSoC4/MyADC.c **** 
 870:Generated_Source\PSoC4/MyADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/MyADC.c ****         adcCounts -= MyADC_offset[chan];
 1239              		.loc 1 871 0 is_stmt 1
 1240 001a 164B     		ldr	r3, .L89
 1241 001c 7A68     		ldr	r2, [r7, #4]
 1242 001e 5200     		lsls	r2, r2, #1
 1243 0020 D35A     		ldrh	r3, [r2, r3]
 1244 0022 19B2     		sxth	r1, r3
 1245 0024 BB1C     		adds	r3, r7, #2
 1246 0026 1A88     		ldrh	r2, [r3]
 1247 0028 8BB2     		uxth	r3, r1
 1248 002a D31A     		subs	r3, r2, r3
 1249 002c 9AB2     		uxth	r2, r3
 1250 002e BB1C     		adds	r3, r7, #2
 1251 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/MyADC.c **** 
 873:Generated_Source\PSoC4/MyADC.c ****         volts = ((float32)adcCounts * MyADC_10V_COUNTS) / (float32)MyADC_countsPer10Volt[chan];
 1252              		.loc 1 873 0
 1253 0032 BB1C     		adds	r3, r7, #2
 1254 0034 0022     		movs	r2, #0
 1255 0036 9B5E     		ldrsh	r3, [r3, r2]
 1256 0038 1800     		movs	r0, r3
 1257 003a FFF7FEFF 		bl	__aeabi_i2f
 1258 003e 031C     		adds	r3, r0, #0
 1259 0040 0D49     		ldr	r1, .L89+4
 1260 0042 181C     		adds	r0, r3, #0
 1261 0044 FFF7FEFF 		bl	__aeabi_fmul
 1262 0048 031C     		adds	r3, r0, #0
 1263 004a 1C1C     		adds	r4, r3, #0
 1264 004c 0B4B     		ldr	r3, .L89+8
 1265 004e 7A68     		ldr	r2, [r7, #4]
 1266 0050 9200     		lsls	r2, r2, #2
 1267 0052 D358     		ldr	r3, [r2, r3]
 1268 0054 1800     		movs	r0, r3
 1269 0056 FFF7FEFF 		bl	__aeabi_i2f
 1270 005a 031C     		adds	r3, r0, #0
 1271 005c 191C     		adds	r1, r3, #0
 1272 005e 201C     		adds	r0, r4, #0
 1273 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1274 0064 031C     		adds	r3, r0, #0
 1275 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/MyADC.c **** 
 875:Generated_Source\PSoC4/MyADC.c ****         return( volts );
 1276              		.loc 1 875 0
 1277 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/MyADC.c ****     }
 1278              		.loc 1 876 0
 1279 006a 181C     		adds	r0, r3, #0
 1280 006c BD46     		mov	sp, r7
 1281 006e 05B0     		add	sp, sp, #20
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 39


 1282              		@ sp needed
 1283 0070 90BD     		pop	{r4, r7, pc}
 1284              	.L90:
 1285 0072 C046     		.align	2
 1286              	.L89:
 1287 0074 00000000 		.word	MyADC_offset
 1288 0078 00002041 		.word	1092616192
 1289 007c 00000000 		.word	MyADC_countsPer10Volt
 1290              		.cfi_endproc
 1291              	.LFE19:
 1292              		.size	MyADC_CountsTo_Volts, .-MyADC_CountsTo_Volts
 1293              		.text
 1294              	.Letext0:
 1295              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1296              		.section	.debug_info,"",%progbits
 1297              	.Ldebug_info0:
 1298 0000 8D040000 		.4byte	0x48d
 1299 0004 0400     		.2byte	0x4
 1300 0006 00000000 		.4byte	.Ldebug_abbrev0
 1301 000a 04       		.byte	0x4
 1302 000b 01       		.uleb128 0x1
 1303 000c D9010000 		.4byte	.LASF60
 1304 0010 0C       		.byte	0xc
 1305 0011 A5000000 		.4byte	.LASF61
 1306 0015 E0000000 		.4byte	.LASF62
 1307 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1308 001d 00000000 		.4byte	0
 1309 0021 00000000 		.4byte	.Ldebug_line0
 1310 0025 02       		.uleb128 0x2
 1311 0026 01       		.byte	0x1
 1312 0027 06       		.byte	0x6
 1313 0028 99000000 		.4byte	.LASF0
 1314 002c 02       		.uleb128 0x2
 1315 002d 01       		.byte	0x1
 1316 002e 08       		.byte	0x8
 1317 002f D4020000 		.4byte	.LASF1
 1318 0033 02       		.uleb128 0x2
 1319 0034 02       		.byte	0x2
 1320 0035 05       		.byte	0x5
 1321 0036 E2020000 		.4byte	.LASF2
 1322 003a 02       		.uleb128 0x2
 1323 003b 02       		.byte	0x2
 1324 003c 07       		.byte	0x7
 1325 003d B0010000 		.4byte	.LASF3
 1326 0041 02       		.uleb128 0x2
 1327 0042 04       		.byte	0x4
 1328 0043 05       		.byte	0x5
 1329 0044 CA000000 		.4byte	.LASF4
 1330 0048 02       		.uleb128 0x2
 1331 0049 04       		.byte	0x4
 1332 004a 07       		.byte	0x7
 1333 004b 7C010000 		.4byte	.LASF5
 1334 004f 02       		.uleb128 0x2
 1335 0050 08       		.byte	0x8
 1336 0051 05       		.byte	0x5
 1337 0052 8B000000 		.4byte	.LASF6
 1338 0056 02       		.uleb128 0x2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 40


 1339 0057 08       		.byte	0x8
 1340 0058 07       		.byte	0x7
 1341 0059 60000000 		.4byte	.LASF7
 1342 005d 03       		.uleb128 0x3
 1343 005e 04       		.byte	0x4
 1344 005f 05       		.byte	0x5
 1345 0060 696E7400 		.ascii	"int\000"
 1346 0064 02       		.uleb128 0x2
 1347 0065 04       		.byte	0x4
 1348 0066 07       		.byte	0x7
 1349 0067 4F010000 		.4byte	.LASF8
 1350 006b 04       		.uleb128 0x4
 1351 006c D3000000 		.4byte	.LASF9
 1352 0070 02       		.byte	0x2
 1353 0071 E401     		.2byte	0x1e4
 1354 0073 2C000000 		.4byte	0x2c
 1355 0077 04       		.uleb128 0x4
 1356 0078 00000000 		.4byte	.LASF10
 1357 007c 02       		.byte	0x2
 1358 007d E501     		.2byte	0x1e5
 1359 007f 3A000000 		.4byte	0x3a
 1360 0083 04       		.uleb128 0x4
 1361 0084 17010000 		.4byte	.LASF11
 1362 0088 02       		.byte	0x2
 1363 0089 E601     		.2byte	0x1e6
 1364 008b 48000000 		.4byte	0x48
 1365 008f 04       		.uleb128 0x4
 1366 0090 8E030000 		.4byte	.LASF12
 1367 0094 02       		.byte	0x2
 1368 0095 E801     		.2byte	0x1e8
 1369 0097 33000000 		.4byte	0x33
 1370 009b 04       		.uleb128 0x4
 1371 009c C4000000 		.4byte	.LASF13
 1372 00a0 02       		.byte	0x2
 1373 00a1 E901     		.2byte	0x1e9
 1374 00a3 41000000 		.4byte	0x41
 1375 00a7 04       		.uleb128 0x4
 1376 00a8 79020000 		.4byte	.LASF14
 1377 00ac 02       		.byte	0x2
 1378 00ad EA01     		.2byte	0x1ea
 1379 00af B3000000 		.4byte	0xb3
 1380 00b3 02       		.uleb128 0x2
 1381 00b4 04       		.byte	0x4
 1382 00b5 04       		.byte	0x4
 1383 00b6 B7020000 		.4byte	.LASF15
 1384 00ba 02       		.uleb128 0x2
 1385 00bb 08       		.byte	0x8
 1386 00bc 04       		.byte	0x4
 1387 00bd D9000000 		.4byte	.LASF16
 1388 00c1 04       		.uleb128 0x4
 1389 00c2 B1020000 		.4byte	.LASF17
 1390 00c6 02       		.byte	0x2
 1391 00c7 EF01     		.2byte	0x1ef
 1392 00c9 4F000000 		.4byte	0x4f
 1393 00cd 02       		.uleb128 0x2
 1394 00ce 01       		.byte	0x1
 1395 00cf 08       		.byte	0x8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 41


 1396 00d0 27030000 		.4byte	.LASF18
 1397 00d4 04       		.uleb128 0x4
 1398 00d5 73020000 		.4byte	.LASF19
 1399 00d9 02       		.byte	0x2
 1400 00da 9002     		.2byte	0x290
 1401 00dc E0000000 		.4byte	0xe0
 1402 00e0 05       		.uleb128 0x5
 1403 00e1 83000000 		.4byte	0x83
 1404 00e5 02       		.uleb128 0x2
 1405 00e6 08       		.byte	0x8
 1406 00e7 04       		.byte	0x4
 1407 00e8 93020000 		.4byte	.LASF20
 1408 00ec 02       		.uleb128 0x2
 1409 00ed 04       		.byte	0x4
 1410 00ee 07       		.byte	0x7
 1411 00ef 81020000 		.4byte	.LASF21
 1412 00f3 06       		.uleb128 0x6
 1413 00f4 67020000 		.4byte	.LASF25
 1414 00f8 01       		.byte	0x1
 1415 00f9 3F       		.byte	0x3f
 1416 00fa 00000000 		.4byte	.LFB2
 1417 00fe 24000000 		.4byte	.LFE2-.LFB2
 1418 0102 01       		.uleb128 0x1
 1419 0103 9C       		.byte	0x9c
 1420 0104 07       		.uleb128 0x7
 1421 0105 5C010000 		.4byte	.LASF36
 1422 0109 01       		.byte	0x1
 1423 010a 5E       		.byte	0x5e
 1424 010b 00000000 		.4byte	.LFB3
 1425 010f D8010000 		.4byte	.LFE3-.LFB3
 1426 0113 01       		.uleb128 0x1
 1427 0114 9C       		.byte	0x9c
 1428 0115 44010000 		.4byte	0x144
 1429 0119 08       		.uleb128 0x8
 1430 011a 06030000 		.4byte	.LASF22
 1431 011e 01       		.byte	0x1
 1432 011f 60       		.byte	0x60
 1433 0120 83000000 		.4byte	0x83
 1434 0124 02       		.uleb128 0x2
 1435 0125 91       		.byte	0x91
 1436 0126 74       		.sleb128 -12
 1437 0127 08       		.uleb128 0x8
 1438 0128 94010000 		.4byte	.LASF23
 1439 012c 01       		.byte	0x1
 1440 012d 61       		.byte	0x61
 1441 012e 83000000 		.4byte	0x83
 1442 0132 02       		.uleb128 0x2
 1443 0133 91       		.byte	0x91
 1444 0134 6C       		.sleb128 -20
 1445 0135 08       		.uleb128 0x8
 1446 0136 0F000000 		.4byte	.LASF24
 1447 013a 01       		.byte	0x1
 1448 013b 62       		.byte	0x62
 1449 013c 9B000000 		.4byte	0x9b
 1450 0140 02       		.uleb128 0x2
 1451 0141 91       		.byte	0x91
 1452 0142 70       		.sleb128 -16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 42


 1453 0143 00       		.byte	0
 1454 0144 09       		.uleb128 0x9
 1455 0145 BD020000 		.4byte	.LASF26
 1456 0149 01       		.byte	0x1
 1457 014a 4A01     		.2byte	0x14a
 1458 014c 00000000 		.4byte	.LFB4
 1459 0150 38000000 		.4byte	.LFE4-.LFB4
 1460 0154 01       		.uleb128 0x1
 1461 0155 9C       		.byte	0x9c
 1462 0156 0A       		.uleb128 0xa
 1463 0157 94030000 		.4byte	.LASF27
 1464 015b 01       		.byte	0x1
 1465 015c 6D01     		.2byte	0x16d
 1466 015e 00000000 		.4byte	.LFB5
 1467 0162 1C000000 		.4byte	.LFE5-.LFB5
 1468 0166 01       		.uleb128 0x1
 1469 0167 9C       		.byte	0x9c
 1470 0168 0A       		.uleb128 0xa
 1471 0169 3A030000 		.4byte	.LASF28
 1472 016d 01       		.byte	0x1
 1473 016e 8701     		.2byte	0x187
 1474 0170 00000000 		.4byte	.LFB6
 1475 0174 1C000000 		.4byte	.LFE6-.LFB6
 1476 0178 01       		.uleb128 0x1
 1477 0179 9C       		.byte	0x9c
 1478 017a 0A       		.uleb128 0xa
 1479 017b 9E010000 		.4byte	.LASF29
 1480 017f 01       		.byte	0x1
 1481 0180 A001     		.2byte	0x1a0
 1482 0182 00000000 		.4byte	.LFB7
 1483 0186 20000000 		.4byte	.LFE7-.LFB7
 1484 018a 01       		.uleb128 0x1
 1485 018b 9C       		.byte	0x9c
 1486 018c 0B       		.uleb128 0xb
 1487 018d 0C030000 		.4byte	.LASF31
 1488 0191 01       		.byte	0x1
 1489 0192 C201     		.2byte	0x1c2
 1490 0194 83000000 		.4byte	0x83
 1491 0198 00000000 		.4byte	.LFB8
 1492 019c 48000000 		.4byte	.LFE8-.LFB8
 1493 01a0 01       		.uleb128 0x1
 1494 01a1 9C       		.byte	0x9c
 1495 01a2 C5010000 		.4byte	0x1c5
 1496 01a6 0C       		.uleb128 0xc
 1497 01a7 47010000 		.4byte	.LASF33
 1498 01ab 01       		.byte	0x1
 1499 01ac C201     		.2byte	0x1c2
 1500 01ae 83000000 		.4byte	0x83
 1501 01b2 02       		.uleb128 0x2
 1502 01b3 91       		.byte	0x91
 1503 01b4 6C       		.sleb128 -20
 1504 01b5 0D       		.uleb128 0xd
 1505 01b6 74030000 		.4byte	.LASF30
 1506 01ba 01       		.byte	0x1
 1507 01bb C401     		.2byte	0x1c4
 1508 01bd 83000000 		.4byte	0x83
 1509 01c1 02       		.uleb128 0x2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 43


 1510 01c2 91       		.byte	0x91
 1511 01c3 74       		.sleb128 -12
 1512 01c4 00       		.byte	0
 1513 01c5 0E       		.uleb128 0xe
 1514 01c6 1E010000 		.4byte	.LASF32
 1515 01ca 01       		.byte	0x1
 1516 01cb F801     		.2byte	0x1f8
 1517 01cd 8F000000 		.4byte	0x8f
 1518 01d1 00000000 		.4byte	.LFB9
 1519 01d5 44000000 		.4byte	.LFE9-.LFB9
 1520 01d9 01       		.uleb128 0x1
 1521 01da 9C       		.byte	0x9c
 1522 01db FE010000 		.4byte	0x1fe
 1523 01df 0C       		.uleb128 0xc
 1524 01e0 22030000 		.4byte	.LASF34
 1525 01e4 01       		.byte	0x1
 1526 01e5 F801     		.2byte	0x1f8
 1527 01e7 83000000 		.4byte	0x83
 1528 01eb 02       		.uleb128 0x2
 1529 01ec 91       		.byte	0x91
 1530 01ed 6C       		.sleb128 -20
 1531 01ee 0D       		.uleb128 0xd
 1532 01ef AF030000 		.4byte	.LASF35
 1533 01f3 01       		.byte	0x1
 1534 01f4 FA01     		.2byte	0x1fa
 1535 01f6 83000000 		.4byte	0x83
 1536 01fa 02       		.uleb128 0x2
 1537 01fb 91       		.byte	0x91
 1538 01fc 74       		.sleb128 -12
 1539 01fd 00       		.byte	0
 1540 01fe 0F       		.uleb128 0xf
 1541 01ff 9F020000 		.4byte	.LASF37
 1542 0203 01       		.byte	0x1
 1543 0204 2502     		.2byte	0x225
 1544 0206 00000000 		.4byte	.LFB10
 1545 020a 20000000 		.4byte	.LFE10-.LFB10
 1546 020e 01       		.uleb128 0x1
 1547 020f 9C       		.byte	0x9c
 1548 0210 24020000 		.4byte	0x224
 1549 0214 0C       		.uleb128 0xc
 1550 0215 30010000 		.4byte	.LASF38
 1551 0219 01       		.byte	0x1
 1552 021a 2502     		.2byte	0x225
 1553 021c 83000000 		.4byte	0x83
 1554 0220 02       		.uleb128 0x2
 1555 0221 91       		.byte	0x91
 1556 0222 74       		.sleb128 -12
 1557 0223 00       		.byte	0
 1558 0224 0F       		.uleb128 0xf
 1559 0225 35010000 		.4byte	.LASF39
 1560 0229 01       		.byte	0x1
 1561 022a 5102     		.2byte	0x251
 1562 022c 00000000 		.4byte	.LFB11
 1563 0230 30000000 		.4byte	.LFE11-.LFB11
 1564 0234 01       		.uleb128 0x1
 1565 0235 9C       		.byte	0x9c
 1566 0236 4A020000 		.4byte	0x24a
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 44


 1567 023a 0C       		.uleb128 0xc
 1568 023b 8A020000 		.4byte	.LASF40
 1569 023f 01       		.byte	0x1
 1570 0240 5102     		.2byte	0x251
 1571 0242 83000000 		.4byte	0x83
 1572 0246 02       		.uleb128 0x2
 1573 0247 91       		.byte	0x91
 1574 0248 74       		.sleb128 -12
 1575 0249 00       		.byte	0
 1576 024a 0F       		.uleb128 0xf
 1577 024b 7B030000 		.4byte	.LASF41
 1578 024f 01       		.byte	0x1
 1579 0250 6602     		.2byte	0x266
 1580 0252 00000000 		.4byte	.LFB12
 1581 0256 30000000 		.4byte	.LFE12-.LFB12
 1582 025a 01       		.uleb128 0x1
 1583 025b 9C       		.byte	0x9c
 1584 025c 70020000 		.4byte	0x270
 1585 0260 0C       		.uleb128 0xc
 1586 0261 CA020000 		.4byte	.LASF42
 1587 0265 01       		.byte	0x1
 1588 0266 6602     		.2byte	0x266
 1589 0268 83000000 		.4byte	0x83
 1590 026c 02       		.uleb128 0x2
 1591 026d 91       		.byte	0x91
 1592 026e 74       		.sleb128 -12
 1593 026f 00       		.byte	0
 1594 0270 0F       		.uleb128 0xf
 1595 0271 F3020000 		.4byte	.LASF43
 1596 0275 01       		.byte	0x1
 1597 0276 7E02     		.2byte	0x27e
 1598 0278 00000000 		.4byte	.LFB13
 1599 027c 20000000 		.4byte	.LFE13-.LFB13
 1600 0280 01       		.uleb128 0x1
 1601 0281 9C       		.byte	0x9c
 1602 0282 96020000 		.4byte	0x296
 1603 0286 0C       		.uleb128 0xc
 1604 0287 30010000 		.4byte	.LASF38
 1605 028b 01       		.byte	0x1
 1606 028c 7E02     		.2byte	0x27e
 1607 028e 83000000 		.4byte	0x83
 1608 0292 02       		.uleb128 0x2
 1609 0293 91       		.byte	0x91
 1610 0294 74       		.sleb128 -12
 1611 0295 00       		.byte	0
 1612 0296 0F       		.uleb128 0xf
 1613 0297 24000000 		.4byte	.LASF44
 1614 029b 01       		.byte	0x1
 1615 029c 9502     		.2byte	0x295
 1616 029e 00000000 		.4byte	.LFB14
 1617 02a2 20000000 		.4byte	.LFE14-.LFB14
 1618 02a6 01       		.uleb128 0x1
 1619 02a7 9C       		.byte	0x9c
 1620 02a8 BC020000 		.4byte	0x2bc
 1621 02ac 0C       		.uleb128 0xc
 1622 02ad 30010000 		.4byte	.LASF38
 1623 02b1 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 45


 1624 02b2 9502     		.2byte	0x295
 1625 02b4 83000000 		.4byte	0x83
 1626 02b8 02       		.uleb128 0x2
 1627 02b9 91       		.byte	0x91
 1628 02ba 74       		.sleb128 -12
 1629 02bb 00       		.byte	0
 1630 02bc 10       		.uleb128 0x10
 1631 02bd 9F030000 		.4byte	.LASF45
 1632 02c1 01       		.byte	0x1
 1633 02c2 B102     		.2byte	0x2b1
 1634 02c4 00000000 		.4byte	.LFB15
 1635 02c8 34000000 		.4byte	.LFE15-.LFB15
 1636 02cc 01       		.uleb128 0x1
 1637 02cd 9C       		.byte	0x9c
 1638 02ce F1020000 		.4byte	0x2f1
 1639 02d2 0C       		.uleb128 0xc
 1640 02d3 22030000 		.4byte	.LASF34
 1641 02d7 01       		.byte	0x1
 1642 02d8 B102     		.2byte	0x2b1
 1643 02da 83000000 		.4byte	0x83
 1644 02de 02       		.uleb128 0x2
 1645 02df 91       		.byte	0x91
 1646 02e0 74       		.sleb128 -12
 1647 02e1 0C       		.uleb128 0xc
 1648 02e2 4D030000 		.4byte	.LASF46
 1649 02e6 01       		.byte	0x1
 1650 02e7 B102     		.2byte	0x2b1
 1651 02e9 8F000000 		.4byte	0x8f
 1652 02ed 02       		.uleb128 0x2
 1653 02ee 91       		.byte	0x91
 1654 02ef 72       		.sleb128 -14
 1655 02f0 00       		.byte	0
 1656 02f1 10       		.uleb128 0x10
 1657 02f2 16000000 		.4byte	.LASF47
 1658 02f6 01       		.byte	0x1
 1659 02f7 D302     		.2byte	0x2d3
 1660 02f9 00000000 		.4byte	.LFB16
 1661 02fd 2C000000 		.4byte	.LFE16-.LFB16
 1662 0301 01       		.uleb128 0x1
 1663 0302 9C       		.byte	0x9c
 1664 0303 26030000 		.4byte	0x326
 1665 0307 0C       		.uleb128 0xc
 1666 0308 22030000 		.4byte	.LASF34
 1667 030c 01       		.byte	0x1
 1668 030d D302     		.2byte	0x2d3
 1669 030f 83000000 		.4byte	0x83
 1670 0313 02       		.uleb128 0x2
 1671 0314 91       		.byte	0x91
 1672 0315 74       		.sleb128 -12
 1673 0316 0C       		.uleb128 0xc
 1674 0317 07000000 		.4byte	.LASF48
 1675 031b 01       		.byte	0x1
 1676 031c D302     		.2byte	0x2d3
 1677 031e 9B000000 		.4byte	0x9b
 1678 0322 02       		.uleb128 0x2
 1679 0323 91       		.byte	0x91
 1680 0324 70       		.sleb128 -16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 46


 1681 0325 00       		.byte	0
 1682 0326 0E       		.uleb128 0xe
 1683 0327 54030000 		.4byte	.LASF49
 1684 032b 01       		.byte	0x1
 1685 032c F402     		.2byte	0x2f4
 1686 032e 8F000000 		.4byte	0x8f
 1687 0332 00000000 		.4byte	.LFB17
 1688 0336 A0000000 		.4byte	.LFE17-.LFB17
 1689 033a 01       		.uleb128 0x1
 1690 033b 9C       		.byte	0x9c
 1691 033c 6E030000 		.4byte	0x36e
 1692 0340 0C       		.uleb128 0xc
 1693 0341 22030000 		.4byte	.LASF34
 1694 0345 01       		.byte	0x1
 1695 0346 F402     		.2byte	0x2f4
 1696 0348 83000000 		.4byte	0x83
 1697 034c 02       		.uleb128 0x2
 1698 034d 91       		.byte	0x91
 1699 034e 6C       		.sleb128 -20
 1700 034f 0C       		.uleb128 0xc
 1701 0350 6A030000 		.4byte	.LASF50
 1702 0354 01       		.byte	0x1
 1703 0355 F402     		.2byte	0x2f4
 1704 0357 8F000000 		.4byte	0x8f
 1705 035b 02       		.uleb128 0x2
 1706 035c 91       		.byte	0x91
 1707 035d 6A       		.sleb128 -22
 1708 035e 0D       		.uleb128 0xd
 1709 035f EC020000 		.4byte	.LASF51
 1710 0363 01       		.byte	0x1
 1711 0364 F602     		.2byte	0x2f6
 1712 0366 8F000000 		.4byte	0x8f
 1713 036a 02       		.uleb128 0x2
 1714 036b 91       		.byte	0x91
 1715 036c 76       		.sleb128 -10
 1716 036d 00       		.byte	0
 1717 036e 0E       		.uleb128 0xe
 1718 036f C3010000 		.4byte	.LASF52
 1719 0373 01       		.byte	0x1
 1720 0374 2A03     		.2byte	0x32a
 1721 0376 9B000000 		.4byte	0x9b
 1722 037a 00000000 		.4byte	.LFB18
 1723 037e 90000000 		.4byte	.LFE18-.LFB18
 1724 0382 01       		.uleb128 0x1
 1725 0383 9C       		.byte	0x9c
 1726 0384 B6030000 		.4byte	0x3b6
 1727 0388 0C       		.uleb128 0xc
 1728 0389 22030000 		.4byte	.LASF34
 1729 038d 01       		.byte	0x1
 1730 038e 2A03     		.2byte	0x32a
 1731 0390 83000000 		.4byte	0x83
 1732 0394 02       		.uleb128 0x2
 1733 0395 91       		.byte	0x91
 1734 0396 64       		.sleb128 -28
 1735 0397 0C       		.uleb128 0xc
 1736 0398 6A030000 		.4byte	.LASF50
 1737 039c 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 47


 1738 039d 2A03     		.2byte	0x32a
 1739 039f 8F000000 		.4byte	0x8f
 1740 03a3 02       		.uleb128 0x2
 1741 03a4 91       		.byte	0x91
 1742 03a5 62       		.sleb128 -30
 1743 03a6 0D       		.uleb128 0xd
 1744 03a7 84000000 		.4byte	.LASF53
 1745 03ab 01       		.byte	0x1
 1746 03ac 2C03     		.2byte	0x32c
 1747 03ae C1000000 		.4byte	0xc1
 1748 03b2 02       		.uleb128 0x2
 1749 03b3 91       		.byte	0x91
 1750 03b4 68       		.sleb128 -24
 1751 03b5 00       		.byte	0
 1752 03b6 0E       		.uleb128 0xe
 1753 03b7 67010000 		.4byte	.LASF54
 1754 03bb 01       		.byte	0x1
 1755 03bc 5703     		.2byte	0x357
 1756 03be A7000000 		.4byte	0xa7
 1757 03c2 00000000 		.4byte	.LFB19
 1758 03c6 80000000 		.4byte	.LFE19-.LFB19
 1759 03ca 01       		.uleb128 0x1
 1760 03cb 9C       		.byte	0x9c
 1761 03cc FE030000 		.4byte	0x3fe
 1762 03d0 0C       		.uleb128 0xc
 1763 03d1 22030000 		.4byte	.LASF34
 1764 03d5 01       		.byte	0x1
 1765 03d6 5703     		.2byte	0x357
 1766 03d8 83000000 		.4byte	0x83
 1767 03dc 02       		.uleb128 0x2
 1768 03dd 91       		.byte	0x91
 1769 03de 64       		.sleb128 -28
 1770 03df 0C       		.uleb128 0xc
 1771 03e0 6A030000 		.4byte	.LASF50
 1772 03e4 01       		.byte	0x1
 1773 03e5 5703     		.2byte	0x357
 1774 03e7 8F000000 		.4byte	0x8f
 1775 03eb 02       		.uleb128 0x2
 1776 03ec 91       		.byte	0x91
 1777 03ed 62       		.sleb128 -30
 1778 03ee 0D       		.uleb128 0xd
 1779 03ef 8E010000 		.4byte	.LASF55
 1780 03f3 01       		.byte	0x1
 1781 03f4 5903     		.2byte	0x359
 1782 03f6 A7000000 		.4byte	0xa7
 1783 03fa 02       		.uleb128 0x2
 1784 03fb 91       		.byte	0x91
 1785 03fc 6C       		.sleb128 -20
 1786 03fd 00       		.byte	0
 1787 03fe 11       		.uleb128 0x11
 1788 03ff 0E040000 		.4byte	0x40e
 1789 0403 0E040000 		.4byte	0x40e
 1790 0407 12       		.uleb128 0x12
 1791 0408 EC000000 		.4byte	0xec
 1792 040c 00       		.byte	0
 1793 040d 00       		.byte	0
 1794 040e 13       		.uleb128 0x13
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 48


 1795 040f 83000000 		.4byte	0x83
 1796 0413 08       		.uleb128 0x8
 1797 0414 4B000000 		.4byte	.LASF56
 1798 0418 01       		.byte	0x1
 1799 0419 21       		.byte	0x21
 1800 041a 24040000 		.4byte	0x424
 1801 041e 05       		.uleb128 0x5
 1802 041f 03       		.byte	0x3
 1803 0420 00000000 		.4byte	MyADC_channelsConfig
 1804 0424 13       		.uleb128 0x13
 1805 0425 FE030000 		.4byte	0x3fe
 1806 0429 14       		.uleb128 0x14
 1807 042a 2C030000 		.4byte	.LASF57
 1808 042e 01       		.byte	0x1
 1809 042f 18       		.byte	0x18
 1810 0430 6B000000 		.4byte	0x6b
 1811 0434 05       		.uleb128 0x5
 1812 0435 03       		.byte	0x3
 1813 0436 00000000 		.4byte	MyADC_initVar
 1814 043a 11       		.uleb128 0x11
 1815 043b 4A040000 		.4byte	0x44a
 1816 043f 4A040000 		.4byte	0x44a
 1817 0443 12       		.uleb128 0x12
 1818 0444 EC000000 		.4byte	0xec
 1819 0448 00       		.byte	0
 1820 0449 00       		.byte	0
 1821 044a 05       		.uleb128 0x5
 1822 044b 8F000000 		.4byte	0x8f
 1823 044f 14       		.uleb128 0x14
 1824 0450 77000000 		.4byte	.LASF58
 1825 0454 01       		.byte	0x1
 1826 0455 19       		.byte	0x19
 1827 0456 60040000 		.4byte	0x460
 1828 045a 05       		.uleb128 0x5
 1829 045b 03       		.byte	0x3
 1830 045c 00000000 		.4byte	MyADC_offset
 1831 0460 05       		.uleb128 0x5
 1832 0461 3A040000 		.4byte	0x43a
 1833 0465 11       		.uleb128 0x11
 1834 0466 75040000 		.4byte	0x475
 1835 046a 75040000 		.4byte	0x475
 1836 046e 12       		.uleb128 0x12
 1837 046f EC000000 		.4byte	0xec
 1838 0473 00       		.byte	0
 1839 0474 00       		.byte	0
 1840 0475 05       		.uleb128 0x5
 1841 0476 9B000000 		.4byte	0x9b
 1842 047a 14       		.uleb128 0x14
 1843 047b 35000000 		.4byte	.LASF59
 1844 047f 01       		.byte	0x1
 1845 0480 1A       		.byte	0x1a
 1846 0481 8B040000 		.4byte	0x48b
 1847 0485 05       		.uleb128 0x5
 1848 0486 03       		.byte	0x3
 1849 0487 00000000 		.4byte	MyADC_countsPer10Volt
 1850 048b 05       		.uleb128 0x5
 1851 048c 65040000 		.4byte	0x465
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 49


 1852 0490 00       		.byte	0
 1853              		.section	.debug_abbrev,"",%progbits
 1854              	.Ldebug_abbrev0:
 1855 0000 01       		.uleb128 0x1
 1856 0001 11       		.uleb128 0x11
 1857 0002 01       		.byte	0x1
 1858 0003 25       		.uleb128 0x25
 1859 0004 0E       		.uleb128 0xe
 1860 0005 13       		.uleb128 0x13
 1861 0006 0B       		.uleb128 0xb
 1862 0007 03       		.uleb128 0x3
 1863 0008 0E       		.uleb128 0xe
 1864 0009 1B       		.uleb128 0x1b
 1865 000a 0E       		.uleb128 0xe
 1866 000b 55       		.uleb128 0x55
 1867 000c 17       		.uleb128 0x17
 1868 000d 11       		.uleb128 0x11
 1869 000e 01       		.uleb128 0x1
 1870 000f 10       		.uleb128 0x10
 1871 0010 17       		.uleb128 0x17
 1872 0011 00       		.byte	0
 1873 0012 00       		.byte	0
 1874 0013 02       		.uleb128 0x2
 1875 0014 24       		.uleb128 0x24
 1876 0015 00       		.byte	0
 1877 0016 0B       		.uleb128 0xb
 1878 0017 0B       		.uleb128 0xb
 1879 0018 3E       		.uleb128 0x3e
 1880 0019 0B       		.uleb128 0xb
 1881 001a 03       		.uleb128 0x3
 1882 001b 0E       		.uleb128 0xe
 1883 001c 00       		.byte	0
 1884 001d 00       		.byte	0
 1885 001e 03       		.uleb128 0x3
 1886 001f 24       		.uleb128 0x24
 1887 0020 00       		.byte	0
 1888 0021 0B       		.uleb128 0xb
 1889 0022 0B       		.uleb128 0xb
 1890 0023 3E       		.uleb128 0x3e
 1891 0024 0B       		.uleb128 0xb
 1892 0025 03       		.uleb128 0x3
 1893 0026 08       		.uleb128 0x8
 1894 0027 00       		.byte	0
 1895 0028 00       		.byte	0
 1896 0029 04       		.uleb128 0x4
 1897 002a 16       		.uleb128 0x16
 1898 002b 00       		.byte	0
 1899 002c 03       		.uleb128 0x3
 1900 002d 0E       		.uleb128 0xe
 1901 002e 3A       		.uleb128 0x3a
 1902 002f 0B       		.uleb128 0xb
 1903 0030 3B       		.uleb128 0x3b
 1904 0031 05       		.uleb128 0x5
 1905 0032 49       		.uleb128 0x49
 1906 0033 13       		.uleb128 0x13
 1907 0034 00       		.byte	0
 1908 0035 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 50


 1909 0036 05       		.uleb128 0x5
 1910 0037 35       		.uleb128 0x35
 1911 0038 00       		.byte	0
 1912 0039 49       		.uleb128 0x49
 1913 003a 13       		.uleb128 0x13
 1914 003b 00       		.byte	0
 1915 003c 00       		.byte	0
 1916 003d 06       		.uleb128 0x6
 1917 003e 2E       		.uleb128 0x2e
 1918 003f 00       		.byte	0
 1919 0040 3F       		.uleb128 0x3f
 1920 0041 19       		.uleb128 0x19
 1921 0042 03       		.uleb128 0x3
 1922 0043 0E       		.uleb128 0xe
 1923 0044 3A       		.uleb128 0x3a
 1924 0045 0B       		.uleb128 0xb
 1925 0046 3B       		.uleb128 0x3b
 1926 0047 0B       		.uleb128 0xb
 1927 0048 27       		.uleb128 0x27
 1928 0049 19       		.uleb128 0x19
 1929 004a 11       		.uleb128 0x11
 1930 004b 01       		.uleb128 0x1
 1931 004c 12       		.uleb128 0x12
 1932 004d 06       		.uleb128 0x6
 1933 004e 40       		.uleb128 0x40
 1934 004f 18       		.uleb128 0x18
 1935 0050 9642     		.uleb128 0x2116
 1936 0052 19       		.uleb128 0x19
 1937 0053 00       		.byte	0
 1938 0054 00       		.byte	0
 1939 0055 07       		.uleb128 0x7
 1940 0056 2E       		.uleb128 0x2e
 1941 0057 01       		.byte	0x1
 1942 0058 3F       		.uleb128 0x3f
 1943 0059 19       		.uleb128 0x19
 1944 005a 03       		.uleb128 0x3
 1945 005b 0E       		.uleb128 0xe
 1946 005c 3A       		.uleb128 0x3a
 1947 005d 0B       		.uleb128 0xb
 1948 005e 3B       		.uleb128 0x3b
 1949 005f 0B       		.uleb128 0xb
 1950 0060 27       		.uleb128 0x27
 1951 0061 19       		.uleb128 0x19
 1952 0062 11       		.uleb128 0x11
 1953 0063 01       		.uleb128 0x1
 1954 0064 12       		.uleb128 0x12
 1955 0065 06       		.uleb128 0x6
 1956 0066 40       		.uleb128 0x40
 1957 0067 18       		.uleb128 0x18
 1958 0068 9642     		.uleb128 0x2116
 1959 006a 19       		.uleb128 0x19
 1960 006b 01       		.uleb128 0x1
 1961 006c 13       		.uleb128 0x13
 1962 006d 00       		.byte	0
 1963 006e 00       		.byte	0
 1964 006f 08       		.uleb128 0x8
 1965 0070 34       		.uleb128 0x34
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 51


 1966 0071 00       		.byte	0
 1967 0072 03       		.uleb128 0x3
 1968 0073 0E       		.uleb128 0xe
 1969 0074 3A       		.uleb128 0x3a
 1970 0075 0B       		.uleb128 0xb
 1971 0076 3B       		.uleb128 0x3b
 1972 0077 0B       		.uleb128 0xb
 1973 0078 49       		.uleb128 0x49
 1974 0079 13       		.uleb128 0x13
 1975 007a 02       		.uleb128 0x2
 1976 007b 18       		.uleb128 0x18
 1977 007c 00       		.byte	0
 1978 007d 00       		.byte	0
 1979 007e 09       		.uleb128 0x9
 1980 007f 2E       		.uleb128 0x2e
 1981 0080 00       		.byte	0
 1982 0081 3F       		.uleb128 0x3f
 1983 0082 19       		.uleb128 0x19
 1984 0083 03       		.uleb128 0x3
 1985 0084 0E       		.uleb128 0xe
 1986 0085 3A       		.uleb128 0x3a
 1987 0086 0B       		.uleb128 0xb
 1988 0087 3B       		.uleb128 0x3b
 1989 0088 05       		.uleb128 0x5
 1990 0089 27       		.uleb128 0x27
 1991 008a 19       		.uleb128 0x19
 1992 008b 11       		.uleb128 0x11
 1993 008c 01       		.uleb128 0x1
 1994 008d 12       		.uleb128 0x12
 1995 008e 06       		.uleb128 0x6
 1996 008f 40       		.uleb128 0x40
 1997 0090 18       		.uleb128 0x18
 1998 0091 9642     		.uleb128 0x2116
 1999 0093 19       		.uleb128 0x19
 2000 0094 00       		.byte	0
 2001 0095 00       		.byte	0
 2002 0096 0A       		.uleb128 0xa
 2003 0097 2E       		.uleb128 0x2e
 2004 0098 00       		.byte	0
 2005 0099 3F       		.uleb128 0x3f
 2006 009a 19       		.uleb128 0x19
 2007 009b 03       		.uleb128 0x3
 2008 009c 0E       		.uleb128 0xe
 2009 009d 3A       		.uleb128 0x3a
 2010 009e 0B       		.uleb128 0xb
 2011 009f 3B       		.uleb128 0x3b
 2012 00a0 05       		.uleb128 0x5
 2013 00a1 27       		.uleb128 0x27
 2014 00a2 19       		.uleb128 0x19
 2015 00a3 11       		.uleb128 0x11
 2016 00a4 01       		.uleb128 0x1
 2017 00a5 12       		.uleb128 0x12
 2018 00a6 06       		.uleb128 0x6
 2019 00a7 40       		.uleb128 0x40
 2020 00a8 18       		.uleb128 0x18
 2021 00a9 9742     		.uleb128 0x2117
 2022 00ab 19       		.uleb128 0x19
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 52


 2023 00ac 00       		.byte	0
 2024 00ad 00       		.byte	0
 2025 00ae 0B       		.uleb128 0xb
 2026 00af 2E       		.uleb128 0x2e
 2027 00b0 01       		.byte	0x1
 2028 00b1 3F       		.uleb128 0x3f
 2029 00b2 19       		.uleb128 0x19
 2030 00b3 03       		.uleb128 0x3
 2031 00b4 0E       		.uleb128 0xe
 2032 00b5 3A       		.uleb128 0x3a
 2033 00b6 0B       		.uleb128 0xb
 2034 00b7 3B       		.uleb128 0x3b
 2035 00b8 05       		.uleb128 0x5
 2036 00b9 27       		.uleb128 0x27
 2037 00ba 19       		.uleb128 0x19
 2038 00bb 49       		.uleb128 0x49
 2039 00bc 13       		.uleb128 0x13
 2040 00bd 11       		.uleb128 0x11
 2041 00be 01       		.uleb128 0x1
 2042 00bf 12       		.uleb128 0x12
 2043 00c0 06       		.uleb128 0x6
 2044 00c1 40       		.uleb128 0x40
 2045 00c2 18       		.uleb128 0x18
 2046 00c3 9742     		.uleb128 0x2117
 2047 00c5 19       		.uleb128 0x19
 2048 00c6 01       		.uleb128 0x1
 2049 00c7 13       		.uleb128 0x13
 2050 00c8 00       		.byte	0
 2051 00c9 00       		.byte	0
 2052 00ca 0C       		.uleb128 0xc
 2053 00cb 05       		.uleb128 0x5
 2054 00cc 00       		.byte	0
 2055 00cd 03       		.uleb128 0x3
 2056 00ce 0E       		.uleb128 0xe
 2057 00cf 3A       		.uleb128 0x3a
 2058 00d0 0B       		.uleb128 0xb
 2059 00d1 3B       		.uleb128 0x3b
 2060 00d2 05       		.uleb128 0x5
 2061 00d3 49       		.uleb128 0x49
 2062 00d4 13       		.uleb128 0x13
 2063 00d5 02       		.uleb128 0x2
 2064 00d6 18       		.uleb128 0x18
 2065 00d7 00       		.byte	0
 2066 00d8 00       		.byte	0
 2067 00d9 0D       		.uleb128 0xd
 2068 00da 34       		.uleb128 0x34
 2069 00db 00       		.byte	0
 2070 00dc 03       		.uleb128 0x3
 2071 00dd 0E       		.uleb128 0xe
 2072 00de 3A       		.uleb128 0x3a
 2073 00df 0B       		.uleb128 0xb
 2074 00e0 3B       		.uleb128 0x3b
 2075 00e1 05       		.uleb128 0x5
 2076 00e2 49       		.uleb128 0x49
 2077 00e3 13       		.uleb128 0x13
 2078 00e4 02       		.uleb128 0x2
 2079 00e5 18       		.uleb128 0x18
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 53


 2080 00e6 00       		.byte	0
 2081 00e7 00       		.byte	0
 2082 00e8 0E       		.uleb128 0xe
 2083 00e9 2E       		.uleb128 0x2e
 2084 00ea 01       		.byte	0x1
 2085 00eb 3F       		.uleb128 0x3f
 2086 00ec 19       		.uleb128 0x19
 2087 00ed 03       		.uleb128 0x3
 2088 00ee 0E       		.uleb128 0xe
 2089 00ef 3A       		.uleb128 0x3a
 2090 00f0 0B       		.uleb128 0xb
 2091 00f1 3B       		.uleb128 0x3b
 2092 00f2 05       		.uleb128 0x5
 2093 00f3 27       		.uleb128 0x27
 2094 00f4 19       		.uleb128 0x19
 2095 00f5 49       		.uleb128 0x49
 2096 00f6 13       		.uleb128 0x13
 2097 00f7 11       		.uleb128 0x11
 2098 00f8 01       		.uleb128 0x1
 2099 00f9 12       		.uleb128 0x12
 2100 00fa 06       		.uleb128 0x6
 2101 00fb 40       		.uleb128 0x40
 2102 00fc 18       		.uleb128 0x18
 2103 00fd 9642     		.uleb128 0x2116
 2104 00ff 19       		.uleb128 0x19
 2105 0100 01       		.uleb128 0x1
 2106 0101 13       		.uleb128 0x13
 2107 0102 00       		.byte	0
 2108 0103 00       		.byte	0
 2109 0104 0F       		.uleb128 0xf
 2110 0105 2E       		.uleb128 0x2e
 2111 0106 01       		.byte	0x1
 2112 0107 3F       		.uleb128 0x3f
 2113 0108 19       		.uleb128 0x19
 2114 0109 03       		.uleb128 0x3
 2115 010a 0E       		.uleb128 0xe
 2116 010b 3A       		.uleb128 0x3a
 2117 010c 0B       		.uleb128 0xb
 2118 010d 3B       		.uleb128 0x3b
 2119 010e 05       		.uleb128 0x5
 2120 010f 27       		.uleb128 0x27
 2121 0110 19       		.uleb128 0x19
 2122 0111 11       		.uleb128 0x11
 2123 0112 01       		.uleb128 0x1
 2124 0113 12       		.uleb128 0x12
 2125 0114 06       		.uleb128 0x6
 2126 0115 40       		.uleb128 0x40
 2127 0116 18       		.uleb128 0x18
 2128 0117 9742     		.uleb128 0x2117
 2129 0119 19       		.uleb128 0x19
 2130 011a 01       		.uleb128 0x1
 2131 011b 13       		.uleb128 0x13
 2132 011c 00       		.byte	0
 2133 011d 00       		.byte	0
 2134 011e 10       		.uleb128 0x10
 2135 011f 2E       		.uleb128 0x2e
 2136 0120 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 54


 2137 0121 3F       		.uleb128 0x3f
 2138 0122 19       		.uleb128 0x19
 2139 0123 03       		.uleb128 0x3
 2140 0124 0E       		.uleb128 0xe
 2141 0125 3A       		.uleb128 0x3a
 2142 0126 0B       		.uleb128 0xb
 2143 0127 3B       		.uleb128 0x3b
 2144 0128 05       		.uleb128 0x5
 2145 0129 27       		.uleb128 0x27
 2146 012a 19       		.uleb128 0x19
 2147 012b 11       		.uleb128 0x11
 2148 012c 01       		.uleb128 0x1
 2149 012d 12       		.uleb128 0x12
 2150 012e 06       		.uleb128 0x6
 2151 012f 40       		.uleb128 0x40
 2152 0130 18       		.uleb128 0x18
 2153 0131 9642     		.uleb128 0x2116
 2154 0133 19       		.uleb128 0x19
 2155 0134 01       		.uleb128 0x1
 2156 0135 13       		.uleb128 0x13
 2157 0136 00       		.byte	0
 2158 0137 00       		.byte	0
 2159 0138 11       		.uleb128 0x11
 2160 0139 01       		.uleb128 0x1
 2161 013a 01       		.byte	0x1
 2162 013b 49       		.uleb128 0x49
 2163 013c 13       		.uleb128 0x13
 2164 013d 01       		.uleb128 0x1
 2165 013e 13       		.uleb128 0x13
 2166 013f 00       		.byte	0
 2167 0140 00       		.byte	0
 2168 0141 12       		.uleb128 0x12
 2169 0142 21       		.uleb128 0x21
 2170 0143 00       		.byte	0
 2171 0144 49       		.uleb128 0x49
 2172 0145 13       		.uleb128 0x13
 2173 0146 2F       		.uleb128 0x2f
 2174 0147 0B       		.uleb128 0xb
 2175 0148 00       		.byte	0
 2176 0149 00       		.byte	0
 2177 014a 13       		.uleb128 0x13
 2178 014b 26       		.uleb128 0x26
 2179 014c 00       		.byte	0
 2180 014d 49       		.uleb128 0x49
 2181 014e 13       		.uleb128 0x13
 2182 014f 00       		.byte	0
 2183 0150 00       		.byte	0
 2184 0151 14       		.uleb128 0x14
 2185 0152 34       		.uleb128 0x34
 2186 0153 00       		.byte	0
 2187 0154 03       		.uleb128 0x3
 2188 0155 0E       		.uleb128 0xe
 2189 0156 3A       		.uleb128 0x3a
 2190 0157 0B       		.uleb128 0xb
 2191 0158 3B       		.uleb128 0x3b
 2192 0159 0B       		.uleb128 0xb
 2193 015a 49       		.uleb128 0x49
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 55


 2194 015b 13       		.uleb128 0x13
 2195 015c 3F       		.uleb128 0x3f
 2196 015d 19       		.uleb128 0x19
 2197 015e 02       		.uleb128 0x2
 2198 015f 18       		.uleb128 0x18
 2199 0160 00       		.byte	0
 2200 0161 00       		.byte	0
 2201 0162 00       		.byte	0
 2202              		.section	.debug_aranges,"",%progbits
 2203 0000 A4000000 		.4byte	0xa4
 2204 0004 0200     		.2byte	0x2
 2205 0006 00000000 		.4byte	.Ldebug_info0
 2206 000a 04       		.byte	0x4
 2207 000b 00       		.byte	0
 2208 000c 0000     		.2byte	0
 2209 000e 0000     		.2byte	0
 2210 0010 00000000 		.4byte	.LFB2
 2211 0014 24000000 		.4byte	.LFE2-.LFB2
 2212 0018 00000000 		.4byte	.LFB3
 2213 001c D8010000 		.4byte	.LFE3-.LFB3
 2214 0020 00000000 		.4byte	.LFB4
 2215 0024 38000000 		.4byte	.LFE4-.LFB4
 2216 0028 00000000 		.4byte	.LFB5
 2217 002c 1C000000 		.4byte	.LFE5-.LFB5
 2218 0030 00000000 		.4byte	.LFB6
 2219 0034 1C000000 		.4byte	.LFE6-.LFB6
 2220 0038 00000000 		.4byte	.LFB7
 2221 003c 20000000 		.4byte	.LFE7-.LFB7
 2222 0040 00000000 		.4byte	.LFB8
 2223 0044 48000000 		.4byte	.LFE8-.LFB8
 2224 0048 00000000 		.4byte	.LFB9
 2225 004c 44000000 		.4byte	.LFE9-.LFB9
 2226 0050 00000000 		.4byte	.LFB10
 2227 0054 20000000 		.4byte	.LFE10-.LFB10
 2228 0058 00000000 		.4byte	.LFB11
 2229 005c 30000000 		.4byte	.LFE11-.LFB11
 2230 0060 00000000 		.4byte	.LFB12
 2231 0064 30000000 		.4byte	.LFE12-.LFB12
 2232 0068 00000000 		.4byte	.LFB13
 2233 006c 20000000 		.4byte	.LFE13-.LFB13
 2234 0070 00000000 		.4byte	.LFB14
 2235 0074 20000000 		.4byte	.LFE14-.LFB14
 2236 0078 00000000 		.4byte	.LFB15
 2237 007c 34000000 		.4byte	.LFE15-.LFB15
 2238 0080 00000000 		.4byte	.LFB16
 2239 0084 2C000000 		.4byte	.LFE16-.LFB16
 2240 0088 00000000 		.4byte	.LFB17
 2241 008c A0000000 		.4byte	.LFE17-.LFB17
 2242 0090 00000000 		.4byte	.LFB18
 2243 0094 90000000 		.4byte	.LFE18-.LFB18
 2244 0098 00000000 		.4byte	.LFB19
 2245 009c 80000000 		.4byte	.LFE19-.LFB19
 2246 00a0 00000000 		.4byte	0
 2247 00a4 00000000 		.4byte	0
 2248              		.section	.debug_ranges,"",%progbits
 2249              	.Ldebug_ranges0:
 2250 0000 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 56


 2251 0004 24000000 		.4byte	.LFE2
 2252 0008 00000000 		.4byte	.LFB3
 2253 000c D8010000 		.4byte	.LFE3
 2254 0010 00000000 		.4byte	.LFB4
 2255 0014 38000000 		.4byte	.LFE4
 2256 0018 00000000 		.4byte	.LFB5
 2257 001c 1C000000 		.4byte	.LFE5
 2258 0020 00000000 		.4byte	.LFB6
 2259 0024 1C000000 		.4byte	.LFE6
 2260 0028 00000000 		.4byte	.LFB7
 2261 002c 20000000 		.4byte	.LFE7
 2262 0030 00000000 		.4byte	.LFB8
 2263 0034 48000000 		.4byte	.LFE8
 2264 0038 00000000 		.4byte	.LFB9
 2265 003c 44000000 		.4byte	.LFE9
 2266 0040 00000000 		.4byte	.LFB10
 2267 0044 20000000 		.4byte	.LFE10
 2268 0048 00000000 		.4byte	.LFB11
 2269 004c 30000000 		.4byte	.LFE11
 2270 0050 00000000 		.4byte	.LFB12
 2271 0054 30000000 		.4byte	.LFE12
 2272 0058 00000000 		.4byte	.LFB13
 2273 005c 20000000 		.4byte	.LFE13
 2274 0060 00000000 		.4byte	.LFB14
 2275 0064 20000000 		.4byte	.LFE14
 2276 0068 00000000 		.4byte	.LFB15
 2277 006c 34000000 		.4byte	.LFE15
 2278 0070 00000000 		.4byte	.LFB16
 2279 0074 2C000000 		.4byte	.LFE16
 2280 0078 00000000 		.4byte	.LFB17
 2281 007c A0000000 		.4byte	.LFE17
 2282 0080 00000000 		.4byte	.LFB18
 2283 0084 90000000 		.4byte	.LFE18
 2284 0088 00000000 		.4byte	.LFB19
 2285 008c 80000000 		.4byte	.LFE19
 2286 0090 00000000 		.4byte	0
 2287 0094 00000000 		.4byte	0
 2288              		.section	.debug_line,"",%progbits
 2289              	.Ldebug_line0:
 2290 0000 93020000 		.section	.debug_str,"MS",%progbits,1
 2290      02004200 
 2290      00000201 
 2290      FB0E0D00 
 2290      01010101 
 2291              	.LASF10:
 2292 0000 75696E74 		.ascii	"uint16\000"
 2292      313600
 2293              	.LASF48:
 2294 0007 61646347 		.ascii	"adcGain\000"
 2294      61696E00 
 2295              	.LASF24:
 2296 000f 636F756E 		.ascii	"counts\000"
 2296      747300
 2297              	.LASF47:
 2298 0016 4D794144 		.ascii	"MyADC_SetGain\000"
 2298      435F5365 
 2298      74476169 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 57


 2298      6E00
 2299              	.LASF44:
 2300 0024 4D794144 		.ascii	"MyADC_SetSatMask\000"
 2300      435F5365 
 2300      74536174 
 2300      4D61736B 
 2300      00
 2301              	.LASF59:
 2302 0035 4D794144 		.ascii	"MyADC_countsPer10Volt\000"
 2302      435F636F 
 2302      756E7473 
 2302      50657231 
 2302      30566F6C 
 2303              	.LASF56:
 2304 004b 4D794144 		.ascii	"MyADC_channelsConfig\000"
 2304      435F6368 
 2304      616E6E65 
 2304      6C73436F 
 2304      6E666967 
 2305              	.LASF7:
 2306 0060 6C6F6E67 		.ascii	"long long unsigned int\000"
 2306      206C6F6E 
 2306      6720756E 
 2306      7369676E 
 2306      65642069 
 2307              	.LASF58:
 2308 0077 4D794144 		.ascii	"MyADC_offset\000"
 2308      435F6F66 
 2308      66736574 
 2308      00
 2309              	.LASF53:
 2310 0084 75566F6C 		.ascii	"uVolts\000"
 2310      747300
 2311              	.LASF6:
 2312 008b 6C6F6E67 		.ascii	"long long int\000"
 2312      206C6F6E 
 2312      6720696E 
 2312      7400
 2313              	.LASF0:
 2314 0099 7369676E 		.ascii	"signed char\000"
 2314      65642063 
 2314      68617200 
 2315              	.LASF61:
 2316 00a5 47656E65 		.ascii	"Generated_Source\\PSoC4\\MyADC.c\000"
 2316      72617465 
 2316      645F536F 
 2316      75726365 
 2316      5C50536F 
 2317              	.LASF13:
 2318 00c4 696E7433 		.ascii	"int32\000"
 2318      3200
 2319              	.LASF4:
 2320 00ca 6C6F6E67 		.ascii	"long int\000"
 2320      20696E74 
 2320      00
 2321              	.LASF9:
 2322 00d3 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 58


 2322      3800
 2323              	.LASF16:
 2324 00d9 646F7562 		.ascii	"double\000"
 2324      6C6500
 2325              	.LASF62:
 2326 00e0 433A5C55 		.ascii	"C:\\Users\\sergio\\Documents\\GitHub\\thermostat\\t"
 2326      73657273 
 2326      5C736572 
 2326      67696F5C 
 2326      446F6375 
 2327 010d 6573742E 		.ascii	"est.cydsn\000"
 2327      63796473 
 2327      6E00
 2328              	.LASF11:
 2329 0117 75696E74 		.ascii	"uint32\000"
 2329      333200
 2330              	.LASF32:
 2331 011e 4D794144 		.ascii	"MyADC_GetResult16\000"
 2331      435F4765 
 2331      74526573 
 2331      756C7431 
 2331      3600
 2332              	.LASF38:
 2333 0130 6D61736B 		.ascii	"mask\000"
 2333      00
 2334              	.LASF39:
 2335 0135 4D794144 		.ascii	"MyADC_SetLowLimit\000"
 2335      435F5365 
 2335      744C6F77 
 2335      4C696D69 
 2335      7400
 2336              	.LASF33:
 2337 0147 7265744D 		.ascii	"retMode\000"
 2337      6F646500 
 2338              	.LASF8:
 2339 014f 756E7369 		.ascii	"unsigned int\000"
 2339      676E6564 
 2339      20696E74 
 2339      00
 2340              	.LASF36:
 2341 015c 4D794144 		.ascii	"MyADC_Init\000"
 2341      435F496E 
 2341      697400
 2342              	.LASF54:
 2343 0167 4D794144 		.ascii	"MyADC_CountsTo_Volts\000"
 2343      435F436F 
 2343      756E7473 
 2343      546F5F56 
 2343      6F6C7473 
 2344              	.LASF5:
 2345 017c 6C6F6E67 		.ascii	"long unsigned int\000"
 2345      20756E73 
 2345      69676E65 
 2345      6420696E 
 2345      7400
 2346              	.LASF55:
 2347 018e 766F6C74 		.ascii	"volts\000"
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 59


 2347      7300
 2348              	.LASF23:
 2349 0194 746D7052 		.ascii	"tmpRegVal\000"
 2349      65675661 
 2349      6C00
 2350              	.LASF29:
 2351 019e 4D794144 		.ascii	"MyADC_StopConvert\000"
 2351      435F5374 
 2351      6F70436F 
 2351      6E766572 
 2351      7400
 2352              	.LASF3:
 2353 01b0 73686F72 		.ascii	"short unsigned int\000"
 2353      7420756E 
 2353      7369676E 
 2353      65642069 
 2353      6E7400
 2354              	.LASF52:
 2355 01c3 4D794144 		.ascii	"MyADC_CountsTo_uVolts\000"
 2355      435F436F 
 2355      756E7473 
 2355      546F5F75 
 2355      566F6C74 
 2356              	.LASF60:
 2357 01d9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2357      43313120 
 2357      352E342E 
 2357      31203230 
 2357      31363036 
 2358 020c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2358      20726576 
 2358      6973696F 
 2358      6E203233 
 2358      37373135 
 2359 023f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2359      66756E63 
 2359      74696F6E 
 2359      2D736563 
 2359      74696F6E 
 2360              	.LASF25:
 2361 0267 4D794144 		.ascii	"MyADC_Start\000"
 2361      435F5374 
 2361      61727400 
 2362              	.LASF19:
 2363 0273 72656733 		.ascii	"reg32\000"
 2363      3200
 2364              	.LASF14:
 2365 0279 666C6F61 		.ascii	"float32\000"
 2365      74333200 
 2366              	.LASF21:
 2367 0281 73697A65 		.ascii	"sizetype\000"
 2367      74797065 
 2367      00
 2368              	.LASF40:
 2369 028a 6C6F774C 		.ascii	"lowLimit\000"
 2369      696D6974 
 2369      00
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 60


 2370              	.LASF20:
 2371 0293 6C6F6E67 		.ascii	"long double\000"
 2371      20646F75 
 2371      626C6500 
 2372              	.LASF37:
 2373 029f 4D794144 		.ascii	"MyADC_SetChanMask\000"
 2373      435F5365 
 2373      74436861 
 2373      6E4D6173 
 2373      6B00
 2374              	.LASF17:
 2375 02b1 696E7436 		.ascii	"int64\000"
 2375      3400
 2376              	.LASF15:
 2377 02b7 666C6F61 		.ascii	"float\000"
 2377      7400
 2378              	.LASF26:
 2379 02bd 4D794144 		.ascii	"MyADC_Enable\000"
 2379      435F456E 
 2379      61626C65 
 2379      00
 2380              	.LASF42:
 2381 02ca 68696768 		.ascii	"highLimit\000"
 2381      4C696D69 
 2381      7400
 2382              	.LASF1:
 2383 02d4 756E7369 		.ascii	"unsigned char\000"
 2383      676E6564 
 2383      20636861 
 2383      7200
 2384              	.LASF2:
 2385 02e2 73686F72 		.ascii	"short int\000"
 2385      7420696E 
 2385      7400
 2386              	.LASF51:
 2387 02ec 6D566F6C 		.ascii	"mVolts\000"
 2387      747300
 2388              	.LASF43:
 2389 02f3 4D794144 		.ascii	"MyADC_SetLimitMask\000"
 2389      435F5365 
 2389      744C696D 
 2389      69744D61 
 2389      736B00
 2390              	.LASF22:
 2391 0306 63684E75 		.ascii	"chNum\000"
 2391      6D00
 2392              	.LASF31:
 2393 030c 4D794144 		.ascii	"MyADC_IsEndConversion\000"
 2393      435F4973 
 2393      456E6443 
 2393      6F6E7665 
 2393      7273696F 
 2394              	.LASF34:
 2395 0322 6368616E 		.ascii	"chan\000"
 2395      00
 2396              	.LASF18:
 2397 0327 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccZjl7Me.s 			page 61


 2397      00
 2398              	.LASF57:
 2399 032c 4D794144 		.ascii	"MyADC_initVar\000"
 2399      435F696E 
 2399      69745661 
 2399      7200
 2400              	.LASF28:
 2401 033a 4D794144 		.ascii	"MyADC_StartConvert\000"
 2401      435F5374 
 2401      61727443 
 2401      6F6E7665 
 2401      727400
 2402              	.LASF46:
 2403 034d 6F666673 		.ascii	"offset\000"
 2403      657400
 2404              	.LASF49:
 2405 0354 4D794144 		.ascii	"MyADC_CountsTo_mVolts\000"
 2405      435F436F 
 2405      756E7473 
 2405      546F5F6D 
 2405      566F6C74 
 2406              	.LASF50:
 2407 036a 61646343 		.ascii	"adcCounts\000"
 2407      6F756E74 
 2407      7300
 2408              	.LASF30:
 2409 0374 73746174 		.ascii	"status\000"
 2409      757300
 2410              	.LASF41:
 2411 037b 4D794144 		.ascii	"MyADC_SetHighLimit\000"
 2411      435F5365 
 2411      74486967 
 2411      684C696D 
 2411      697400
 2412              	.LASF12:
 2413 038e 696E7431 		.ascii	"int16\000"
 2413      3600
 2414              	.LASF27:
 2415 0394 4D794144 		.ascii	"MyADC_Stop\000"
 2415      435F5374 
 2415      6F7000
 2416              	.LASF45:
 2417 039f 4D794144 		.ascii	"MyADC_SetOffset\000"
 2417      435F5365 
 2417      744F6666 
 2417      73657400 
 2418              	.LASF35:
 2419 03af 72657375 		.ascii	"result\000"
 2419      6C7400
 2420              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
